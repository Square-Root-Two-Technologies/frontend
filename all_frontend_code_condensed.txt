# Structure
{"package.json":true,"postcss.config.js":true,"public":{"index.html":true},"src":{"App.css":true,"App.js":true,"App.test.js":true,"components":{"AddNote":{"AddNote.js":true},"BlogCard":{"BlogCard.js":true},"BlogCardAnimation":{"BlogCardAnimation.css":true,"BlogCardAnimation.js":true},"BlogSpace":{"BlogSpace.js":true},"EditNote":{"EditNote.js":true},"EditorToolbar":{"MenuBar.js":true},"EditProfile":{"EditProfile.js":true},"EmptySpace":{"EmptySpace.js":true},"FeaturedPosts":{"FeaturedPosts.js":true},"HomeScreen":{"HomeScreen.js":true},"LoadingMoreBlogs":{"LoadingMoreBlogs.js":true},"LoadingSpinner":{"LoadingSpinner.js":true},"Login":{"Login.js":true},"MyNotesPage":{"MyNotesPage.js":true},"Navbar":{"Navbar.js":true},"NotesGrid":{"NotesGrid.js":true},"ProtectedRoute":{"ProtectedRoute.js":true},"Sidebar":{"Sidebar.js":true},"Signup":{"Signup.js":true},"SingleBlogPage":{"SingleBlogPage.js":true},"Tabs":{"Tabs.js":true},"UserProfile":{"UserProfile.js":true}},"context":{"Notes":{"NoteContext.js":true,"NoteState.js":true},"ThemeProvider":{"ThemeProvider.js":true},"user":{"UserContext.js":true,"UserState.js":true}},"index.css":true,"index.js":true,"reportWebVitals.js":true,"setupTests.js":true,"utils":{"typeColors.js":true}},"tailwind.config.js":true}

# Code

# package.json
{"name":"squareroottwotechnologies","version":"0.1.0","private":true,"dependencies":{"@react-spring/web":"^9.7.5","@react-three/drei":"^9.105.6","@react-three/fiber":"^8.16.8","@testing-library/dom":"^10.4.0","@testing-library/jest-dom":"^6.6.3","@testing-library/react":"^16.3.0","@testing-library/user-event":"^13.5.0","@tiptap/extension-code-block-lowlight":"^2.11.7","@tiptap/extension-image":"^2.11.7","@tiptap/extension-link":"^2.11.7","@tiptap/extension-placeholder":"^2.11.7","@tiptap/pm":"^2.11.7","@tiptap/react":"^2.11.7","@tiptap/starter-kit":"^2.11.7","dompurify":"^3.2.5","framer-motion":"^12.6.3","konva":"^9.3.20","lowlight":"^3.3.0","react":"^18.2.0","react-dom":"^18.2.0","react-icons":"^5.5.0","react-konva":"^19.0.3","react-router-dom":"^6.30.0","react-scripts":"^5.0.1","three":"^0.175.0","watchman":"^1.0.0","web-vitals":"^2.1.4"},"scripts":{"start":"react-scripts start","build":"react-scripts build","test":"react-scripts test","eject":"react-scripts eject"},"eslintConfig":{"extends":["react-app","react-app/jest"]},"browserslist":{"production":[">0.2%","not dead","not op_mini all"],"development":["last 1 chrome version","last 1 firefox version","last 1 safari version"]},"devDependencies":{"autoprefixer":"^10.4.21","chokidar":"^4.0.3","postcss":"^8.5.3","postcss-loader":"^8.1.1","tailwindcss":"^4.1.3"}}

# postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

# public/index.html
<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8" /> <link rel="icon" href="%PUBLIC_URL%/favicon.ico" /> <meta name="viewport" content="width=device-width, initial-scale=1" /> <meta name="theme-color" content="#000000" /> <meta name="description" content="Web site created using create-react-app" /> <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" /> <!-- manifest.json provides metadata used when your web app is installed on a user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/ --> <link rel="manifest" href="%PUBLIC_URL%/manifest.json" /> <!-- Notice the use of %PUBLIC_URL% in the tags above. It will be replaced with the URL of the `public` folder during the build. Only files inside the `public` folder can be referenced from the HTML. Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will work correctly both with client-side routing and a non-root public URL. Learn how to configure a non-root public URL by running `npm run build`. --> <title>√(2)</title> </head> <body> <noscript>You need to enable JavaScript to run this app.</noscript> <div id="root"></div> <!-- This HTML file is a template. If you open it directly in the browser, you will see an empty page. You can add webfonts, meta tags, or analytics to this file. The build step will place the bundled scripts into the <body> tag. To begin the development, run `npm start` or `yarn start`. To create a production bundle, use `npm run build` or `yarn build`. --> </body> </html> 

# src/App.js
import React from "react";
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import Navbar from "./components/Navbar/Navbar";
import HomeScreen from "./components/HomeScreen/HomeScreen";
import BlogSpace from "./components/BlogSpace/BlogSpace";
import SingleBlogPage from "./components/SingleBlogPage/SingleBlogPage";
import Login from "./components/Login/Login";
import Signup from "./components/Signup/Signup";
import ProtectedRoute from "./components/ProtectedRoute/ProtectedRoute";
import MyNotesPage from "./components/MyNotesPage/MyNotesPage";
import NoteState from "./context/Notes/NoteState";
import UserState from "./context/user/UserState"; 
import ThemeProvider from "./context/ThemeProvider/ThemeProvider";
import AddNote from "./components/AddNote/AddNote";
import EditNote from "./components/EditNote/EditNote";
import UserProfile from "./components/UserProfile/UserProfile";
import EditProfile from "./components/EditProfile/EditProfile";
function App() {
  return (
    <ThemeProvider>
      <UserState>
        <NoteState>
          <Router>
            <div className="flex flex-col min-h-screen">
              <Navbar />
              <main className="flex-grow container mx-auto px-4 py-8">
                <Routes>
                  <Route path="/" element={<HomeScreen />} />
                  <Route path="/blogspace" element={<BlogSpace />} />
                  <Route path="/blog/:id" element={<SingleBlogPage />} />
                  <Route path="/login" element={<Login />} />
                  <Route path="/signup" element={<Signup />} />
                  <Route
                    path="/my-notes"
                    element={
                      <ProtectedRoute>
                        <MyNotesPage />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/add-note"
                    element={
                      <ProtectedRoute>
                        <AddNote />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/edit-note/:id"
                    element={
                      <ProtectedRoute>
                        <EditNote />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/profile"
                    element={
                      <ProtectedRoute>
                        <UserProfile />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/edit-profile"
                    element={
                      <ProtectedRoute>
                        <EditProfile />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="*"
                    element={
                      <div className="p-6 text-center text-xl text-error">
                        404 - Page Not Found
                      </div>
                    }
                  />
                </Routes>
              </main>
            </div>
          </Router>
        </NoteState>
      </UserState>
    </ThemeProvider>
  );
}
export default App;

# src/App.test.js
import { render, screen } from '@testing-library/react';
import App from './App';
test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

# src/components/AddNote/AddNote.js
import React, { useState, useContext, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import NoteContext from "../../context/Notes/NoteContext";
import UserContext from "../../context/user/UserContext";
import LoadingSpinner from "../LoadingSpinner/LoadingSpinner";
import { useEditor, EditorContent } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import Placeholder from "@tiptap/extension-placeholder";
import Link from "@tiptap/extension-link";
import Image from "@tiptap/extension-image";
import MenuBar from "../EditorToolbar/MenuBar";
const AddNote = () => {
  const navigate = useNavigate();
  const { addNote } = useContext(NoteContext);
  const { currentUser } = useContext(UserContext);
  const [noteTitle, setNoteTitle] = useState("");
  const [noteTag, setNoteTag] = useState("");
  const [noteType, setNoteType] = useState("");
  const [noteIsFeatured, setNoteIsFeatured] = useState(false);
  const [editorContent, setEditorContent] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        codeBlock: {
          HTMLAttributes: {
            class:
              "bg-gray-100 dark:bg-gray-900 p-2 rounded text-sm font-mono overflow-x-auto",
          },
        },
        heading: {
          levels: [2, 3, 4],
        },
      }),
      Placeholder.configure({
        placeholder: "Write your note here...",
      }),
      Link.configure({
        openOnClick: false,
        autolink: true,
      }),
      Image.configure({
        inline: false,
        HTMLAttributes: {
          class: "max-w-full h-auto my-4 rounded",
        },
      }),
    ],
    content: editorContent,
    onUpdate: ({ editor }) => {
      setEditorContent(editor.getHTML());
    },
    editorProps: {
      attributes: {
        class:
          "prose dark:prose-invert prose-sm sm:prose-base focus:outline-none p-4 min-h-[300px] md:min-h-[400px] lg:min-h-[500px] border border-t-0 border-gray-200 dark:border-gray-700 rounded-b-lg bg-white dark:bg-gray-800 text-neutral dark:text-gray-200",
      },
    },
  });
  useEffect(() => {
    return () => {
      editor?.destroy();
    };
  }, [editor]);
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setIsLoading(true);
    if (!noteTitle || noteTitle.length < 3) {
      setError("Title must be at least 3 characters long.");
      setIsLoading(false);
      return;
    }
    if (
      !editorContent ||
      editorContent === "<p></p>" ||
      editor.getText().trim().length < 5
    ) {
      setError("Description must be at least 5 characters long.");
      setIsLoading(false);
      return;
    }
    if (!noteType) {
      setError("Please select a note type.");
      setIsLoading(false);
      return;
    }
    try {
      const noteToAdd = {
        title: noteTitle,
        description: editorContent,
        tag: noteTag || "General",
        type: noteType,
      };
      if (currentUser?.role === "admin") {
        noteToAdd.isFeatured = noteIsFeatured;
      }
      const response = await addNote(noteToAdd);
      if (response.success) {
        navigate("/my-notes");
      } else {
        setError(response.message || "Failed to add note. Please try again.");
      }
    } catch (err) {
      console.error("Add note error:", err);
      setError("An unexpected error occurred. Please try again later.");
    } finally {
      setIsLoading(false);
    }
  };
  const inputFieldClasses = "input-field mt-1";
  const labelClasses =
    "block text-sm font-medium text-neutral dark:text-gray-200";
  const errorTextClasses =
    "text-sm text-error text-center p-3 bg-red-100 dark:bg-red-900/20 rounded-md my-4";
  const requiredMarkClasses = "text-error";
  const checkboxClasses = `h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:checked:bg-blue-500 rounded`;
  return (
    <div className="min-h-screen flex flex-col items-center justify-center px-4 sm:px-6 lg:px-8 py-8 sm:py-12">
      {}
      {}
      <div className="card w-full max-w-6xl">
        {" "}
        {}
        <h1 className="text-heading mb-6 text-center">Add New Note</h1>
        <form onSubmit={handleSubmit} className="space-y-6">
          {error && <div className={errorTextClasses}>{error}</div>}
          {}
          <div>
            <label htmlFor="title" className={labelClasses}>
              Title <span className={requiredMarkClasses}>*</span>
            </label>
            <input
              type="text"
              name="title"
              id="title"
              required
              minLength="3"
              value={noteTitle}
              onChange={(e) => setNoteTitle(e.target.value)}
              className={inputFieldClasses}
              placeholder="Note Title"
              disabled={isLoading}
            />
          </div>
          {}
          <div>
            <label htmlFor="description" className={labelClasses}>
              Description <span className={requiredMarkClasses}>*</span>
            </label>
            <div className="mt-1 border-collapse">
              <MenuBar editor={editor} />
              {}
              <EditorContent editor={editor} id="description" />
            </div>
            <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
              Use the toolbar above to format your text.
            </p>
          </div>
          {}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {}
            <div>
              <label htmlFor="type" className={labelClasses}>
                Type <span className={requiredMarkClasses}>*</span>
              </label>
              <select
                name="type"
                id="type"
                required
                value={noteType}
                onChange={(e) => setNoteType(e.target.value)}
                className={inputFieldClasses}
                disabled={isLoading}
              >
                <option value="" disabled>
                  Select a type
                </option>
                <option value="JavaScript">JavaScript</option>
                <option value="Salesforce">Salesforce</option>
                <option value="Sociology">Sociology</option>
                <option value="Life">Life</option>
                <option value="Technology">Technology</option>
                <option value="Creative">Creative</option>
                <option value="Tutorial">Tutorial</option>
                <option value="News">News</option>
              </select>
            </div>
            {}
            <div>
              <label htmlFor="tag" className={labelClasses}>
                Tag <span className="text-xs text-gray-500">(Optional)</span>
              </label>
              <input
                type="text"
                name="tag"
                id="tag"
                value={noteTag}
                onChange={(e) => setNoteTag(e.target.value)}
                className={inputFieldClasses}
                placeholder="e.g., React, ProjectX"
                disabled={isLoading}
              />
            </div>
          </div>
          {}
          {}
          {currentUser?.role === "admin" && (
            <div className="flex items-center pt-2">
              <input
                type="checkbox"
                name="isFeatured"
                id="isFeatured"
                checked={noteIsFeatured}
                onChange={(e) => setNoteIsFeatured(e.target.checked)}
                className={checkboxClasses}
                disabled={isLoading}
              />
              <label
                htmlFor="isFeatured"
                className={`ml-2 block text-sm font-medium text-neutral dark:text-gray-200`}
              >
                Mark as Featured (Admin Only)
              </label>
            </div>
          )}
          {}
          <button
            type="submit"
            className={`btn-primary w-full ${
              isLoading ? "opacity-50 cursor-not-allowed" : ""
            }`}
            disabled={isLoading || !editor}
          >
            {isLoading ? <LoadingSpinner /> : "Add Note"}
          </button>
        </form>
      </div>
    </div>
  );
};
export default AddNote;

# src/components/BlogCard/BlogCard.js
import React from "react";
import { Link } from "react-router-dom";
import { getTypeColor } from "../../utils/typeColors";
import BlogCardAnimation from "../BlogCardAnimation/BlogCardAnimation";
const BlogCard = React.forwardRef(
  ({ note, isFeatured = false, isLoading = false }, ref) => {
    if (isLoading) {
      return (
        <article
          ref={ref}
          className="group bg-white dark:bg-gray-900 rounded-xl shadow-md overflow-hidden w-full max-w-sm mx-auto flex flex-col border-t-4 border-gray-300 dark:border-gray-700 animate-pulse h-[450px]"
        >
          <div className="w-full h-36 bg-gray-300 dark:bg-gray-700"></div>
          <div className="p-5 flex flex-col gap-3 flex-grow">
            <div className="h-5 bg-gray-300 dark:bg-gray-700 rounded w-3/4 mb-1"></div>
            <div className="h-3 bg-gray-300 dark:bg-gray-700 rounded w-1/2 mb-2"></div>
            <div className="space-y-2 flex-grow">
              <div className="h-3 bg-gray-300 dark:bg-gray-700 rounded"></div>
              <div className="h-3 bg-gray-300 dark:bg-gray-700 rounded w-5/6"></div>
              <div className="h-3 bg-gray-300 dark:bg-gray-700 rounded w-4/6"></div>
            </div>
            <div className="flex justify-between items-center mt-auto pt-2">
              <div className="h-4 bg-gray-300 dark:bg-gray-700 rounded w-1/4"></div>
              <div className="h-5 bg-gray-300 dark:bg-gray-700 rounded-full w-1/6"></div>
            </div>
          </div>
        </article>
      );
    }
    if (!note) return null;
    const { _id, title, description, tag, type, readTimeMinutes, user, date } =
      note;
    const authorName = user?.name || "Unknown Author";
    const authorAvatarUrl = user?.avatarUrl;
    const postDate = date ? new Date(date).toLocaleDateString() : "No date";
    const effectiveType = type || tag || "default";
    const typeColorClass = getTypeColor(effectiveType);
    return (
      <article
        ref={ref}
        className={`group bg-white dark:bg-gray-900 rounded-xl shadow-md hover:shadow-xl transition-all duration-300 overflow-hidden w-full max-w-sm mx-auto flex flex-col border-t-4 ${typeColorClass} h-[450px]`}
      >
        <div className="w-full h-36 flex-shrink-0">
          {" "}
          {}
          <BlogCardAnimation type={effectiveType} noteId={_id} />
        </div>
        <div className="p-5 flex flex-col gap-3 flex-grow">
          <h2
            className={`font-bold text-gray-900 dark:text-gray-100 ${
              isFeatured ? "text-xl" : "text-lg"
            } line-clamp-2`} 
          >
            <Link
              to={`/blog/${_id}`}
              className="hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            >
              {title || "Untitled Post"}
            </Link>
          </h2>
          <div className="text-xs text-gray-600 dark:text-gray-400 flex items-center gap-2 flex-wrap">
            {authorAvatarUrl ? (
              <img
                src={authorAvatarUrl}
                alt={authorName}
                className="h-5 w-5 rounded-full object-cover"
                onError={(e) => (e.target.style.display = "none")}
              />
            ) : (
              <DefaultAvatar />
            )}
            <span>{authorName}</span>
            <span>•</span>
            <span>{postDate}</span>
            {readTimeMinutes && (
              <>
                <span>•</span>
                <span>{readTimeMinutes} min read</span>
              </>
            )}
          </div>
          {}
          <p className="text-sm text-gray-700 dark:text-gray-300 line-clamp-3 flex-grow">
            {}
            {description && description.includes("<") ? (
              <span
                dangerouslySetInnerHTML={{
                  __html:
                    description.replace(/<[^>]+>/g, "").substring(0, 150) +
                    (description.length > 150 ? "..." : ""),
                }}
              />
            ) : (
              description || "No description available."
            )}
          </p>
          <div className="flex justify-between items-center mt-auto pt-2 border-t border-gray-100 dark:border-gray-800">
            {" "}
            {}
            <Link
              to={`/blog/${_id}`}
              className="text-blue-600 dark:text-blue-400 hover:underline font-medium text-sm"
            >
              Read More →
            </Link>
            {(type || tag) && (
              <span className="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 text-xs font-medium rounded-full capitalize">
                {" "}
                {}
                {effectiveType}
              </span>
            )}
          </div>
        </div>
      </article>
    );
  },
);
const DefaultAvatar = () => (
  <svg
    className="h-5 w-5 text-gray-500 dark:text-gray-400"
    fill="currentColor"
    viewBox="0 0 20 20"
  >
    <path
      fillRule="evenodd"
      d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
      clipRule="evenodd"
    />
  </svg>
);
export default BlogCard;

# src/components/BlogCardAnimation/BlogCardAnimation.css
.type-blue-600-fill{@apply fill-blue-600;}.type-blue-600-stroke{@apply stroke-blue-600;}.type-blue-600-text{@apply text-blue-600;}.type-blue-600-bg-light{@apply bg-blue-100;}.dark .type-blue-600-bg-light{@apply bg-blue-900;}.type-purple-600-fill{@apply fill-purple-600;}.type-purple-600-stroke{@apply stroke-purple-600;}.type-purple-600-text{@apply text-purple-600;}.type-purple-600-bg-light{@apply bg-purple-100;}.dark .type-purple-600-bg-light{@apply bg-purple-900;}.type-green-600-fill{@apply fill-green-600;}.type-green-600-stroke{@apply stroke-green-600;}.type-green-600-text{@apply text-green-600;}.type-green-600-bg-light{@apply bg-green-100;}.dark .type-green-600-bg-light{@apply bg-green-900;}.type-pink-600-fill{@apply fill-pink-600;}.type-pink-600-stroke{@apply stroke-pink-600;}.type-pink-600-text{@apply text-pink-600;}.type-pink-600-bg-light{@apply bg-pink-100;}.dark .type-pink-600-bg-light{@apply bg-pink-900;}.type-red-600-fill{@apply fill-red-600;}.type-red-600-stroke{@apply stroke-red-600;}.type-red-600-text{@apply text-red-600;}.type-red-600-bg-light{@apply bg-red-100;}.dark .type-red-600-bg-light{@apply bg-red-900;}.type-yellow-600-fill{@apply fill-yellow-600;}.type-yellow-600-stroke{@apply stroke-yellow-600;}.type-yellow-600-text{@apply text-yellow-600;}.type-yellow-600-bg-light{@apply bg-yellow-100;}.dark .type-yellow-600-bg-light{@apply bg-yellow-900;}.type-cyan-600-fill{@apply fill-cyan-600;}.type-cyan-600-stroke{@apply stroke-cyan-600;}.type-cyan-600-text{@apply text-cyan-600;}.type-cyan-600-bg-light{@apply bg-cyan-100;}.dark .type-cyan-600-bg-light{@apply bg-cyan-900;}.type-indigo-600-fill{@apply fill-indigo-600;}.type-indigo-600-stroke{@apply stroke-indigo-600;}.type-indigo-600-text{@apply text-indigo-600;}.type-indigo-600-bg-light{@apply bg-indigo-100;}.dark .type-indigo-600-bg-light{@apply bg-indigo-900;}.type-teal-600-fill{@apply fill-teal-600;}.type-teal-600-stroke{@apply stroke-teal-600;}.type-teal-600-text{@apply text-teal-600;}.type-teal-600-bg-light{@apply bg-teal-100;}.dark .type-teal-600-bg-light{@apply bg-teal-900;}.type-gray-500-fill{@apply fill-gray-500;}.type-gray-500-stroke{@apply stroke-gray-500;}.type-gray-500-text{@apply text-gray-500;}.type-gray-500-bg-light{@apply bg-gray-100;}.dark .type-gray-500-bg-light{@apply bg-gray-700;}svg{pointer-events:none;}

# src/components/BlogCardAnimation/BlogCardAnimation.js
import React, { useMemo } from "react";
import { motion, useReducedMotion } from "framer-motion"; 
import "./BlogCardAnimation.css"; 
import { getTypeColor } from "../../utils/typeColors";
const ANIMATION_AREA_WIDTH = 100;
const ANIMATION_AREA_HEIGHT = 100;
const MIN_POLYGONS = 2;
const MAX_POLYGONS = 4;
const MIN_SIZE = 20; 
const MAX_SIZE = 45; 
const polygonShapes = [
  "M50 0 L100 100 L0 100 Z", 
  "M0 0 H100 V100 H0 Z", 
  "M50 0 L100 25 L100 75 L50 100 L0 75 L0 25 Z", 
  "M50 0 L75 50 L50 100 L25 50 Z", 
  "M 0 50 A 50 50 0 1 1 100 50 A 50 50 0 1 1 0 50 Z", 
];
const seededRandom = (seed) => {
  if (seed === undefined || seed === null) seed = Math.random() * 10000;
  const x = Math.sin(seed) * 10000;
  return x - Math.floor(x);
};
const rand = (min, max, seed) => min + (max - min) * seededRandom(seed);
const animationVariants = [
  {
    initial: (config) => ({
      x: config.initialX,
      y: config.initialY,
      scale: config.initialScale,
      rotate: config.initialRot,
      opacity: 0,
    }),
    animate: (config) => ({
      x: config.targetX,
      y: config.targetY,
      opacity: [0.1, 0.6, 0.1], 
      scale: config.targetScale,
      rotate: config.targetRot,
      transition: {
        duration: rand(8, 15, config.uniqueSeed + 100), 
        repeat: Infinity,
        repeatType: "mirror", 
        ease: "easeInOut",
        delay: config.delay,
      },
    }),
  },
  {
    initial: (config) => ({
      x: config.initialX,
      y: config.initialY,
      scale: config.initialScale * 0.9, 
      rotate: config.initialRot,
      opacity: 0.5,
    }),
    animate: (config) => ({
      scale: [
        config.initialScale * 0.9,
        config.initialScale * 1.1,
        config.initialScale * 0.9,
      ],
      opacity: [0.4, 0.7, 0.4],
      transition: {
        duration: rand(5, 10, config.uniqueSeed + 101),
        repeat: Infinity,
        ease: "easeInOut",
        delay: config.delay,
      },
    }),
  },
  {
    initial: (config) => ({
      x: config.initialX,
      y: config.initialY,
      scale: config.initialScale,
      rotate: 0,
      opacity: 0.6,
    }),
    animate: (config) => ({
      x: [config.initialX, config.targetX, config.initialX],
      y: [config.initialY, config.targetY, config.initialY],
      rotate: [0, 180, 360],
      transition: {
        duration: rand(10, 18, config.uniqueSeed + 102),
        repeat: Infinity,
        ease: "linear", 
        delay: config.delay,
      },
    }),
  },
];
const BlogCardAnimation = ({ type, noteId }) => {
  const reduceMotion = useReducedMotion();
  const typeColorClass = getTypeColor(type).replace("border-", "type-"); 
  const seed = useMemo(
    () =>
      noteId
        ? noteId.split("").reduce((acc, c) => acc + c.charCodeAt(0), 0) * 3 
        : Math.random() * 1000,
    [noteId],
  );
  const polygonConfigs = useMemo(() => {
    const count = Math.floor(rand(MIN_POLYGONS, MAX_POLYGONS + 1, seed));
    return Array.from({ length: count }, (_, i) => {
      const uniqueSeed = seed + i * 101; 
      const size = rand(MIN_SIZE, MAX_SIZE, uniqueSeed + 1);
      const initialX = rand(0, ANIMATION_AREA_WIDTH - size, uniqueSeed + 2);
      const initialY = rand(0, ANIMATION_AREA_HEIGHT - size, uniqueSeed + 3);
      const initialRot = rand(-30, 30, uniqueSeed + 4);
      const initialScale = rand(0.8, 1.1, uniqueSeed + 5);
      const targetX = rand(0, ANIMATION_AREA_WIDTH - size, uniqueSeed + 6);
      const targetY = rand(0, ANIMATION_AREA_HEIGHT - size, uniqueSeed + 7);
      const targetRot = initialRot + rand(-60, 60, uniqueSeed + 8);
      const targetScale = rand(0.9, 1.2, uniqueSeed + 9);
      const shapeIndex = Math.floor(
        rand(0, polygonShapes.length, uniqueSeed + 10),
      );
      const animationIndex = Math.floor(
        rand(0, animationVariants.length, uniqueSeed + 11),
      );
      const delay = rand(0, 1.5, uniqueSeed + 12); 
      return {
        id: `${noteId}-poly-${i}`, 
        shape: polygonShapes[shapeIndex],
        size: size, 
        uniqueSeed: uniqueSeed, 
        initialX,
        initialY,
        initialRot,
        initialScale,
        targetX,
        targetY,
        targetRot,
        targetScale,
        animationVariant: animationVariants[animationIndex],
        delay,
      };
    });
  }, [seed, noteId]); 
  if (reduceMotion) {
    const staticConfig = polygonConfigs[0] || { shape: polygonShapes[1] }; 
    return (
      <div
        className={`w-full h-full flex items-center justify-center ${typeColorClass}-bg-light bg-opacity-30 dark:bg-opacity-20`}
      >
        <svg
          className={`w-1/3 h-1/3 ${typeColorClass}-text opacity-50`} 
          viewBox="0 0 100 100" 
          fill="currentColor"
        >
          <path d={staticConfig.shape} />
        </svg>
      </div>
    );
  }
  return (
    <div className="w-full h-full relative overflow-hidden bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-800/70">
      <motion.svg
        viewBox={`0 0 ${ANIMATION_AREA_WIDTH} ${ANIMATION_AREA_HEIGHT}`}
        className="absolute inset-0 w-full h-full"
        preserveAspectRatio="xMidYMid slice" 
        aria-hidden="true" 
      >
        {polygonConfigs.map((config) => (
          <motion.path
            key={config.id}
            d={config.shape}
            className={`${typeColorClass}-fill fill-current opacity-40 dark:opacity-30`}
            custom={config} 
            initial="initial"
            animate="animate"
            variants={config.animationVariant}
            style={{ transformOrigin: "50% 50%" }}
          />
        ))}
      </motion.svg>
    </div>
  );
};
export default React.memo(BlogCardAnimation); 

# src/components/BlogSpace/BlogSpace.js
import React from "react";
function BlogSpace() {
  return <div>BlogSpace</div>;
}
export default BlogSpace;

# src/components/EditNote/EditNote.js
import React, { useState, useContext, useEffect } from "react";
import { useNavigate, useParams, Link } from "react-router-dom";
import NoteContext from "../../context/Notes/NoteContext";
import UserContext from "../../context/user/UserContext"; 
import LoadingSpinner from "../LoadingSpinner/LoadingSpinner";
const noteTypes = [
  "JavaScript",
  "Salesforce",
  "Sociology",
  "Life",
  "Technology",
  "Creative",
  "Tutorial",
  "News",
];
const EditNote = () => {
  const {
    notes,
    editNote,
    getNotes,
    isLoading: isNotesLoading,
  } = useContext(NoteContext);
  const { currentUser, isUserLoading } = useContext(UserContext); 
  const navigate = useNavigate();
  const { id } = useParams(); 
  const [note, setNote] = useState({
    title: "",
    description: "",
    tag: "",
    type: "",
    isFeatured: false, 
    readTimeMinutes: "", 
  });
  const [error, setError] = useState(""); 
  const [isComponentLoading, setIsComponentLoading] = useState(true); 
  const [isSubmitting, setIsSubmitting] = useState(false); 
  useEffect(() => {
    if (isUserLoading) {
      setIsComponentLoading(true);
      return;
    }
    if (!currentUser) {
      setError("Authentication required to edit notes.");
      setIsComponentLoading(false);
      return;
    }
    setIsComponentLoading(true); 
    setError(""); 
    const findAndSetNote = (notesArray) => {
      const noteToEdit = notesArray.find((n) => n._id === id);
      if (noteToEdit) {
        if (
          noteToEdit.user._id === currentUser._id ||
          currentUser.role === "admin"
        ) {
          setNote({
            title: noteToEdit.title || "",
            description: noteToEdit.description || "",
            tag: noteToEdit.tag || "",
            type: noteToEdit.type || noteTypes[0], 
            isFeatured: noteToEdit.isFeatured || false,
            readTimeMinutes: noteToEdit.readTimeMinutes || "",
          });
          setIsComponentLoading(false);
        } else {
          console.error(
            `Access denied: User ${currentUser.email} cannot edit note ${id} owned by ${noteToEdit.user._id}`,
          );
          setError("You do not have permission to edit this note.");
          setIsComponentLoading(false);
        }
      } else {
        console.error(
          `Note with ID ${id} not found in fetched notes for user ${currentUser.email}.`,
        );
        setError(
          "Note not found. It might have been deleted or you don't have access.",
        );
        setIsComponentLoading(false);
      }
    };
    if (notes.length > 0) {
      findAndSetNote(notes);
    } else {
      console.log(
        `Notes context empty, calling getNotes() for user ${currentUser.email}...`,
      );
      getNotes()
        .then((fetchedNotes) => {
          console.log("getNotes finished for edit page.");
          setIsComponentLoading(false); 
        })
        .catch((err) => {
          console.error("Error fetching notes for edit:", err);
          setError("Failed to load note data for editing.");
          setIsComponentLoading(false);
        });
    }
  }, [id, getNotes, notes, currentUser, isUserLoading]); 
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError("");
    if (!note.title || note.title.length < 3) {
      setError("Title must be at least 3 characters long.");
      setIsSubmitting(false);
      return;
    }
    if (!note.description || note.description.length < 5) {
      setError("Description must be at least 5 characters long.");
      setIsSubmitting(false);
      return;
    }
    if (!note.type || !noteTypes.includes(note.type)) {
      setError("Please select a valid type.");
      setIsSubmitting(false);
      return;
    }
    const updatedTitle = note.title;
    const updatedDescription = note.description;
    const updatedTag = note.tag;
    const updatedType = note.type;
    const updatedIsFeatured =
      currentUser?.role === "admin" ? note.isFeatured : undefined;
    try {
      await editNote(
        id, 
        updatedTitle,
        updatedDescription,
        updatedTag,
        updatedType,
        updatedIsFeatured, 
      );
      console.log("Note update submitted successfully for ID:", id);
      navigate("/my-notes"); 
    } catch (err) {
      console.error("Failed to update note:", err);
      setError(
        err.message ||
          "Failed to update note. Please check fields or try again.",
      );
    } finally {
      setIsSubmitting(false); 
    }
  };
  const onChange = (e) => {
    const { name, value, type: inputType, checked } = e.target;
    setNote({
      ...note,
      [name]: inputType === "checkbox" ? checked : value,
    });
  };
  const baseTextColor = "text-gray-800 dark:text-gray-200";
  const inputBgColor = "bg-gray-50 dark:bg-gray-700";
  const inputBorderColor = "border-gray-300 dark:border-gray-600";
  const focusRingColor = "focus:ring-blue-500 dark:focus:ring-blue-400";
  const focusBorderColor = "focus:border-blue-500 dark:focus:border-blue-400";
  const primaryButtonClasses = `inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 ${focusRingColor} transition duration-150 ease-in-out`;
  const disabledButtonClasses =
    "bg-blue-400 dark:bg-blue-800 cursor-not-allowed";
  const errorTextColor = "text-red-600 dark:text-red-400";
  const inputClasses = `appearance-none relative block w-full px-3 py-2 border ${inputBorderColor} ${inputBgColor} ${baseTextColor} placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none ${focusRingColor} ${focusBorderColor} focus:z-10 sm:text-sm rounded-md`;
  const checkboxClasses = `h-4 w-4 text-blue-600 ${focusRingColor} border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:checked:bg-blue-500 rounded`;
  const requiredMarkClasses = "text-error"; 
  if (isUserLoading || isComponentLoading) {
    return (
      <div className="flex justify-center items-center min-h-[60vh]">
        <LoadingSpinner />
      </div>
    );
  }
  if (!isUserLoading && !isComponentLoading && error && !note.title) {
    return (
      <div className="max-w-2xl mx-auto py-12 px-4 text-center">
        <p className={`text-lg ${errorTextColor} mb-4`}>{error}</p>
        <Link to="/my-notes" className={primaryButtonClasses}>
          Back to Notes
        </Link>
      </div>
    );
  }
  return (
    <div className="max-w-2xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
      <div className="p-8 md:p-10 bg-white dark:bg-gray-900 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
        <h1
          className={`text-2xl md:text-3xl font-bold ${baseTextColor} mb-6 text-center`}
        >
          Edit Note
        </h1>
        <form onSubmit={handleSubmit} className="space-y-4">
          {}
          {error &&
            note.title && ( 
              <div
                className={`text-sm ${errorTextColor} text-center p-2 bg-red-100 dark:bg-red-900/20 rounded-md`}
              >
                {error}
              </div>
            )}
          {}
          <div>
            <label
              htmlFor="title"
              className={`block text-sm font-medium ${baseTextColor}`}
            >
              Title <span className={requiredMarkClasses}>*</span>
            </label>
            <input
              type="text"
              name="title"
              id="title"
              required
              minLength="3"
              value={note.title}
              onChange={onChange}
              className={inputClasses}
              placeholder="Note Title"
              disabled={isSubmitting}
            />
          </div>
          {}
          <div>
            <label
              htmlFor="description"
              className={`block text-sm font-medium ${baseTextColor}`}
            >
              Description <span className={requiredMarkClasses}>*</span>
            </label>
            <textarea
              name="description"
              id="description"
              required
              minLength="5"
              rows="5"
              value={note.description}
              onChange={onChange}
              className={inputClasses}
              placeholder="Write your note here..."
              disabled={isSubmitting}
            ></textarea>
          </div>
          {}
          <div>
            <label
              htmlFor="type"
              className={`block text-sm font-medium ${baseTextColor}`}
            >
              Type <span className={requiredMarkClasses}>*</span>
            </label>
            <select
              name="type"
              id="type"
              required
              value={note.type}
              onChange={onChange}
              className={inputClasses}
              disabled={isSubmitting}
            >
              {}
              {noteTypes.map((typeOption) => (
                <option key={typeOption} value={typeOption}>
                  {typeOption}
                </option>
              ))}
            </select>
          </div>
          {}
          <div>
            <label
              htmlFor="tag"
              className={`block text-sm font-medium ${baseTextColor}`}
            >
              Tag <span className="text-xs text-gray-500">(Optional)</span>
            </label>
            <input
              type="text"
              name="tag"
              id="tag"
              value={note.tag}
              onChange={onChange}
              className={inputClasses}
              placeholder="e.g., React, ProjectX"
              disabled={isSubmitting}
            />
          </div>
          {}
          {currentUser?.role === "admin" && (
            <div className="flex items-center pt-2">
              <input
                type="checkbox"
                name="isFeatured"
                id="isFeatured"
                checked={note.isFeatured} 
                onChange={onChange} 
                className={checkboxClasses} 
                disabled={isSubmitting} 
              />
              <label
                htmlFor="isFeatured"
                className={`ml-2 block text-sm font-medium ${baseTextColor}`}
              >
                Mark as Featured (Admin Only)
              </label>
            </div>
          )}
          {}
          {}
          <div className="pt-4 flex space-x-3">
            {}
            <button
              type="submit"
              className={`${primaryButtonClasses} flex-1 ${
                isSubmitting ? disabledButtonClasses : ""
              }`}
              disabled={isSubmitting}
            >
              {isSubmitting ? <LoadingSpinner /> : "Save Changes"}
            </button>
            {}
            <button
              type="button"
              onClick={() => navigate("/my-notes")} 
              className={`flex-1 inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium ${baseTextColor} bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 dark:focus:ring-offset-gray-900`}
              disabled={isSubmitting}
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};
export default EditNote;

# src/components/EditProfile/EditProfile.js
import React, { useState, useContext, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import UserContext from "../../context/user/UserContext";
import LoadingSpinner from "../LoadingSpinner/LoadingSpinner";
const EditProfile = () => {
  const { currentUser, isUserLoading, updateUserProfile, getUserDetails } =
    useContext(UserContext);
  const [formData, setFormData] = useState({ name: "", email: "" });
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const navigate = useNavigate();
  useEffect(() => {
    if (!currentUser && !isUserLoading) {
      getUserDetails();
    } else if (currentUser) {
      setFormData({ name: currentUser.name, email: currentUser.email });
    }
  }, [currentUser, isUserLoading, getUserDetails]);
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError("");
    setSuccess("");
    try {
      const result = await updateUserProfile({
        name: formData.name,
        email: formData.email,
      });
      if (result) {
        setSuccess("Profile updated successfully!");
        setTimeout(() => navigate("/profile"), 1500); 
      }
    } catch (error) {
      setError(error.message || "Failed to update profile");
    } finally {
      setIsSubmitting(false);
    }
  };
  const onChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
  if (isUserLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <LoadingSpinner size="lg" />
      </div>
    );
  }
  if (!currentUser) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p className="text-lg text-gray-700 dark:text-gray-300">
          Unable to load profile. Please try logging in again.
        </p>
      </div>
    );
  }
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
        <h2 className="text-2xl font-bold text-center text-gray-900 dark:text-white mb-6">
          Edit Profile
        </h2>
        {error && (
          <div className="mb-4 p-3 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200 rounded">
            {error}
          </div>
        )}
        {success && (
          <div className="mb-4 p-3 bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-200 rounded">
            {success}
          </div>
        )}
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label
              htmlFor="name"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={onChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
              placeholder="Enter your name"
              required
              disabled={isSubmitting || isUserLoading}
            />
          </div>
          <div className="mb-6">
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={onChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
              placeholder="Enter your email"
              required
              disabled={isSubmitting || isUserLoading}
            />
          </div>
          <button
            type="submit"
            className="w-full py-2 px-4 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-gray-400 dark:disabled:bg-gray-600"
            disabled={isSubmitting || isUserLoading}
          >
            {isSubmitting || isUserLoading ? (
              <LoadingSpinner size="sm" />
            ) : (
              "Save Changes"
            )}
          </button>
        </form>
      </div>
    </div>
  );
};
export default EditProfile;

# src/components/EditorToolbar/MenuBar.js
import React, { useCallback } from "react";
import {
  FaBold,
  FaItalic,
  FaStrikethrough,
  FaCode,
  FaHeading,
  FaListUl,
  FaListOl,
  FaQuoteLeft,
  FaUndo,
  FaRedo,
  FaLink,
  FaImage,
  FaUnlink,
} from "react-icons/fa";
const MenuBar = ({ editor }) => {
  const setLink = useCallback(() => {
    const previousUrl = editor.getAttributes("link").href;
    const url = window.prompt("URL", previousUrl);
    if (url === null) {
      return;
    }
    if (url === "") {
      editor.chain().focus().extendMarkRange("link").unsetLink().run();
      return;
    }
    editor.chain().focus().extendMarkRange("link").setLink({ href: url }).run();
  }, [editor]);
  const addImage = () => {
    const url = window.prompt("Enter Image URL");
    if (url) {
      editor.chain().focus().setImage({ src: url }).run();
    }
    console.warn(
      "Image upload logic needs to be implemented in AddNote component!",
    );
  };
  if (!editor) {
    return null;
  }
  const buttonClass = (type, options = {}) =>
    `p-2 rounded hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-150 ease-in-out
     ${
       editor.isActive(type, options)
         ? "bg-gray-200 dark:bg-gray-700 text-blue-600 dark:text-blue-400"
         : "text-gray-700 dark:text-gray-300"
     }`;
  return (
    <div className="border border-gray-200 dark:border-gray-700 rounded-t-lg p-2 bg-gray-50 dark:bg-gray-800 flex flex-wrap gap-1 sticky top-0 z-10">
      <button
        onClick={() => editor.chain().focus().toggleBold().run()}
        disabled={!editor.can().chain().focus().toggleBold().run()}
        className={buttonClass("bold")}
        aria-label="Bold"
      >
        <FaBold />
      </button>
      <button
        onClick={() => editor.chain().focus().toggleItalic().run()}
        disabled={!editor.can().chain().focus().toggleItalic().run()}
        className={buttonClass("italic")}
        aria-label="Italic"
      >
        <FaItalic />
      </button>
      <button
        onClick={() => editor.chain().focus().toggleStrike().run()}
        disabled={!editor.can().chain().focus().toggleStrike().run()}
        className={buttonClass("strike")}
        aria-label="Strikethrough"
      >
        <FaStrikethrough />
      </button>
      <button
        onClick={() => editor.chain().focus().toggleCode().run()}
        disabled={!editor.can().chain().focus().toggleCode().run()}
        className={buttonClass("code")}
        aria-label="Inline Code"
      >
        <FaCode />
      </button>
      <button
        onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
        className={buttonClass("heading", { level: 2 })}
        aria-label="Heading 2"
      >
        <FaHeading /> <span className="text-xs">2</span>
      </button>
      <button
        onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
        className={buttonClass("heading", { level: 3 })}
        aria-label="Heading 3"
      >
        <FaHeading /> <span className="text-xs">3</span>
      </button>
      <button
        onClick={() => editor.chain().focus().toggleBulletList().run()}
        className={buttonClass("bulletList")}
        aria-label="Bullet List"
      >
        <FaListUl />
      </button>
      <button
        onClick={() => editor.chain().focus().toggleOrderedList().run()}
        className={buttonClass("orderedList")}
        aria-label="Ordered List"
      >
        <FaListOl />
      </button>
      <button
        onClick={() => editor.chain().focus().toggleCodeBlock().run()}
        className={buttonClass("codeBlock")}
        aria-label="Code Block"
      >
        <FaCode /> Block
      </button>
      <button
        onClick={() => editor.chain().focus().toggleBlockquote().run()}
        className={buttonClass("blockquote")}
        aria-label="Blockquote"
      >
        <FaQuoteLeft />
      </button>
      <button
        onClick={setLink}
        className={buttonClass("link")}
        aria-label="Set Link"
        disabled={editor.isActive("link") && !editor.can().unsetLink()} 
      >
        <FaLink />
      </button>
      <button
        onClick={() => editor.chain().focus().unsetLink().run()}
        disabled={!editor.isActive("link")}
        className={buttonClass("link") + " disabled:opacity-50"} 
        aria-label="Unset Link"
      >
        <FaUnlink />
      </button>
      <button
        onClick={addImage}
        className={buttonClass("")}
        aria-label="Add Image"
      >
        <FaImage />
      </button>
      {}
      <button
        onClick={() => editor.chain().focus().undo().run()}
        disabled={!editor.can().chain().focus().undo().run()}
        className="p-2 rounded hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 disabled:opacity-50"
        aria-label="Undo"
      >
        <FaUndo />
      </button>
      <button
        onClick={() => editor.chain().focus().redo().run()}
        disabled={!editor.can().chain().focus().redo().run()}
        className="p-2 rounded hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 disabled:opacity-50"
        aria-label="Redo"
      >
        <FaRedo />
      </button>
    </div>
  );
};
export default MenuBar;

# src/components/EmptySpace/EmptySpace.js
import React from "react";
const EmptyState = ({ message = "No blog posts found." }) => (
  <div className="card text-center py-12">
    {}
    <h3 className="text-lg font-semibold text-neutral dark:text-gray-100 mb-4">
      {" "}
      {}
      Nothing Here Yet
    </h3>
    <p className="mt-2 text-subtle">{message}</p>
  </div>
);
export default EmptyState;

# src/components/FeaturedPosts/FeaturedPosts.js
import React, { useContext, useRef, useCallback } from "react";
import NoteContext from "../../context/Notes/NoteContext";
import BlogCard from "../BlogCard/BlogCard";
const FeaturedPosts = () => {
  const {
    featuredNotes,
    fetchFeaturedNotesBatch,
    hasMoreFeatured,
    isInitialFeaturedLoading,
    isFetchingMoreFeatured,
  } = useContext(NoteContext);
  const observer = useRef();
  const lastFeaturedNoteRef = useCallback(
    (node) => {
      if (
        isInitialFeaturedLoading ||
        isFetchingMoreFeatured ||
        !hasMoreFeatured
      ) {
        return;
      }
      if (observer.current) observer.current.disconnect();
      observer.current = new IntersectionObserver(
        (entries) => {
          if (entries[0].isIntersecting && hasMoreFeatured) {
            console.log("Fetching next featured batch...");
            fetchFeaturedNotesBatch();
          }
        },
        {
          root: null,
          threshold: 0.8, 
        },
      );
      if (node) observer.current.observe(node);
    },
    [
      isInitialFeaturedLoading,
      isFetchingMoreFeatured,
      hasMoreFeatured,
      fetchFeaturedNotesBatch,
    ],
  );
  return (
    <section className="mb-10">
      <h2 className="text-heading mb-6">Featured Posts</h2>
      <div className="flex space-x-6 overflow-x-auto pb-4 snap-x snap-mandatory scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200 dark:scrollbar-thumb-gray-600 dark:scrollbar-track-gray-800">
        {isInitialFeaturedLoading &&
          Array(3)
            .fill()
            .map((_, i) => (
              <div
                key={`feat-skel-init-${i}`}
                className="w-72 flex-shrink-0 snap-start"
              >
                <BlogCard isLoading={true} />
              </div>
            ))}
        {!isInitialFeaturedLoading &&
          featuredNotes.map((note, index) => (
            <div
              ref={
                index === featuredNotes.length - 1 ? lastFeaturedNoteRef : null
              }
              key={note._id}
              className="w-72 flex-shrink-0 snap-start"
            >
              <BlogCard note={note} isFeatured={true} />
            </div>
          ))}
        {!isInitialFeaturedLoading && isFetchingMoreFeatured && (
          <div className="w-72 flex-shrink-0 snap-start flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 dark:border-blue-400"></div>
          </div>
        )}
        {!isInitialFeaturedLoading &&
          !isFetchingMoreFeatured &&
          featuredNotes.length === 0 && (
            <div className="text-center py-4 text-subtle w-full">
              No featured posts available.
            </div>
          )}
        {!isInitialFeaturedLoading &&
          !hasMoreFeatured &&
          featuredNotes.length > 0 &&
          !isFetchingMoreFeatured && (
            <div className="w-72 flex-shrink-0 snap-start flex items-center justify-center text-subtle text-sm italic">
              End of featured posts.
            </div>
          )}
      </div>
    </section>
  );
};
export default FeaturedPosts;

# src/components/HomeScreen/HomeScreen.js
import React, { useContext, useState, useRef, useEffect } from "react"; 
import NoteContext from "../../context/Notes/NoteContext";
import Sidebar from "../Sidebar/Sidebar";
import Tabs from "../Tabs/Tabs";
import FeaturedPosts from "../FeaturedPosts/FeaturedPosts";
import NotesGrid from "../NotesGrid/NotesGrid";
const HomeScreen = () => {
  const {
    allNotes,
    fetchNextBatchOfNotes,
    hasMore,
    isFetching,
    initialLoadDone,
    blogTypes,
    recentPosts,
  } = useContext(NoteContext);
  const [activeTab, setActiveTab] = useState("All");
  const scrollTargetRef = useRef(null); 
  const isInitialLoadRef = useRef(true);
  const displayedNotes =
    activeTab === "All"
      ? allNotes
      : allNotes.filter(
          (note) => note.type?.toLowerCase() === activeTab.toLowerCase(),
        );
  useEffect(() => {
    if (isInitialLoadRef.current || !scrollTargetRef.current) {
      isInitialLoadRef.current = false;
      return;
    }
    scrollTargetRef.current.scrollIntoView({
      behavior: "smooth",
      block: "start",
    });
  }, [activeTab]);
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
        <main className="lg:col-span-3">
          <FeaturedPosts />
          {}
          {}
          {}
          <div ref={scrollTargetRef} className="scroll-mt-24">
            {" "}
            {}
            {initialLoadDone && blogTypes.length > 1 && (
              <Tabs
                activeTab={activeTab}
                setActiveTab={setActiveTab}
                types={blogTypes}
              />
            )}
            {}
            {}
          </div>
          {}
          {}
          <div>
            <NotesGrid
              notes={displayedNotes}
              isFetching={isFetching}
              hasMore={hasMore}
              initialLoadDone={initialLoadDone}
              fetchNextBatchOfNotes={fetchNextBatchOfNotes}
            />
          </div>
        </main>
        {initialLoadDone && (
          <div className="hidden lg:block lg:col-span-1 sticky top-24 self-start">
            <Sidebar
              types={blogTypes.filter((t) => t !== "All")}
              recentPosts={recentPosts}
            />
          </div>
        )}
      </div>
    </div>
  );
};
export default HomeScreen;

# src/components/LoadingMoreBlogs/LoadingMoreBlogs.js
import React from "react";
const LoadingMoreBlogs = () => {
  return (
    <div className="bg-white dark:bg-gray-900 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 flex flex-col h-[300px] justify-center items-center">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 dark:border-blue-400 mb-2"></div>
      <span className="text-gray-600 dark:text-gray-400">
        Loading more blogs...
      </span>
    </div>
  );
};
export default LoadingMoreBlogs;

# src/components/LoadingSpinner/LoadingSpinner.js
import React from "react";
const LoadingSpinner = () => (
  <div className="flex justify-center items-center py-6">
    <div className="relative">
      <div className="animate-spin rounded-full h-12 w-12 border-4 border-primary border-t-transparent"></div>
      <span className="absolute inset-0 flex items-center justify-center text-sm text-primary font-medium">
        Loading
      </span>
    </div>
  </div>
);
export default LoadingSpinner;

# src/components/Login/Login.js
import React, { useState, useContext, useEffect } from "react";
import { Link, useNavigate, useLocation } from "react-router-dom";
import UserContext from "../../context/user/UserContext";
import LoadingSpinner from "../LoadingSpinner/LoadingSpinner";
const Login = () => {
  const { login, isUserLoading } = useContext(UserContext);
  const [credentials, setCredentials] = useState({ email: "", password: "" });
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [infoMessage, setInfoMessage] = useState("");
  const navigate = useNavigate();
  const location = useLocation();
  useEffect(() => {
    if (location.state?.from?.pathname === "/my-notes") {
      setInfoMessage("Please log in to manage your notes.");
    } else if (location.state?.from) {
      setInfoMessage(
        `Please log in to access ${location.state.from.pathname}.`,
      );
    }
  }, [location.state]); 
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError("");
    try {
      const result = await login(credentials.email, credentials.password);
      if (result.success) {
        const from = location.state?.from?.pathname || "/";
        navigate(from, { replace: true });
      } else {
        setError(result.message || "Invalid email or password.");
      }
    } catch (error) {
      setError(
        error.message || "An unexpected error occurred. Please try again.",
      );
      console.error("Login error:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const onChange = (e) => {
    setCredentials({ ...credentials, [e.target.name]: e.target.value });
  };
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 px-4 py-12 sm:py-16">
      {}
      <div className="w-full max-w-md p-10 md:p-12 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 border-t-4 border-indigo-500">
        <h2 className="text-2xl lg:text-3xl font-bold text-center text-gray-900 dark:text-white mb-8">
          {" "}
          {}
          Login to Your Account
        </h2>
        {infoMessage && (
          <div className="mb-4 p-3 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-200 rounded text-center text-sm">
            {infoMessage}
          </div>
        )}
        {error && (
          <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-200 rounded text-sm">
            {" "}
            {}
            {error}
          </div>
        )}
        <form onSubmit={handleSubmit} className="space-y-6">
          {" "}
          {}
          <div>
            {" "}
            {}
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" 
            >
              Email Address
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={credentials.email}
              onChange={onChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white sm:text-sm" 
              placeholder="you@example.com"
              required
              autoComplete="email"
              disabled={isLoading || isUserLoading}
            />
          </div>
          <div>
            {" "}
            {}
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" 
            >
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              value={credentials.password}
              onChange={onChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white sm:text-sm" 
              placeholder="Enter your password"
              required
              autoComplete="current-password"
              disabled={isLoading || isUserLoading}
            />
          </div>
          <button
            type="submit"
            className="w-full flex justify-center py-2.5 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed dark:focus:ring-offset-gray-800" 
            disabled={isLoading || isUserLoading}
          >
            {isLoading || isUserLoading ? (
              <LoadingSpinner size="sm" /> 
            ) : (
              "Login"
            )}
          </button>
        </form>
        <p className="mt-6 text-center text-sm text-gray-600 dark:text-gray-400">
          {" "}
          {}
          Don’t have an account?{" "}
          <Link
            to="/signup"
            className="font-medium text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300"
          >
            Sign up here
          </Link>
        </p>
      </div>
    </div>
  );
};
export default Login;

# src/components/MyNotesPage/MyNotesPage.js
import React, { useContext, useEffect } from "react"; 
import { useNavigate } from "react-router-dom";
import NoteContext from "../../context/Notes/NoteContext";
import UserContext from "../../context/user/UserContext"; 
import LoadingSpinner from "../LoadingSpinner/LoadingSpinner";
import EmptyState from "../EmptySpace/EmptySpace"; 
const MyNoteCard = ({ note, onDelete, onEdit, isAdminView }) => {
  const { title, description, date, _id, tag, type, user } = note;
  const postDate = new Date(date).toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  });
  const authorName = user?.name || "Unknown Author";
  const baseTextColor = "text-gray-800 dark:text-gray-200";
  const subtleTextColor = "text-gray-500 dark:text-gray-400";
  const cardBg = "bg-white dark:bg-gray-900";
  const cardBorder = "border border-gray-200 dark:border-gray-700";
  const buttonBase =
    "px-3 py-1 text-xs font-medium rounded transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-900";
  const editButton = `${buttonBase} bg-blue-100 text-blue-700 hover:bg-blue-200 dark:bg-blue-900/50 dark:text-blue-300 dark:hover:bg-blue-900 focus:ring-blue-500`;
  const deleteButton = `${buttonBase} bg-red-100 text-red-700 hover:bg-red-200 dark:bg-red-900/50 dark:text-red-300 dark:hover:bg-red-900 focus:ring-red-500`;
  const authorInfoClass = `text-xs font-medium ${subtleTextColor} mb-1 italic`; 
  return (
    <div
      className={`p-4 md:p-5 ${cardBg} ${cardBorder} rounded-lg shadow-md flex flex-col`}
    >
      {}
      {isAdminView && user && (
        <p className={authorInfoClass}>
          Author:{" "}
          <span className="font-semibold not-italic text-gray-600 dark:text-gray-300">
            {authorName}
          </span>
        </p>
      )}
      {}
      <h3
        className={`text-lg font-semibold ${baseTextColor} mb-1 line-clamp-2`}
      >
        {title}
      </h3>
      <p className={`text-xs ${subtleTextColor} mb-2`}>{postDate}</p>
      <p
        className={`text-sm ${baseTextColor} overflow-hidden overflow-ellipsis line-clamp-3 h-[60px] mb-3 flex-grow`}
      >
        {description}
      </p>
      {(type || tag) && (
        <span
          className={`self-start inline-block mb-3 px-2 py-0.5 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 text-xs font-medium rounded-full`}
        >
          {type || tag}
        </span>
      )}
      {}
      <div className="mt-auto pt-3 flex justify-end space-x-2 border-t border-gray-100 dark:border-gray-700">
        <button
          onClick={() => onEdit(_id)}
          className={editButton}
          aria-label={`Edit note titled ${title}`}
        >
          Edit
        </button>
        <button
          onClick={() => onDelete(_id)}
          className={deleteButton}
          aria-label={`Delete note titled ${title}`}
        >
          Delete
        </button>
      </div>
    </div>
  );
};
const MyNotesPage = () => {
  const {
    notes,
    getNotes,
    deleteNote,
    isLoading: isNotesLoading,
  } = useContext(NoteContext);
  const { currentUser, isUserLoading } = useContext(UserContext);
  const navigate = useNavigate();
  useEffect(() => {
    if (!isUserLoading && currentUser) {
      console.log(
        `User loaded (Role: ${currentUser.role}). Fetching notes for 'MyNotesPage'...`,
      );
      getNotes() 
        .catch((err) => console.error("Error fetching notes:", err));
    } else if (!isUserLoading && !currentUser) {
      console.warn("Attempted to load MyNotesPage without logged-in user.");
    }
  }, [currentUser, isUserLoading, getNotes]); 
  const handleDelete = (id) => {
    if (
      window.confirm(
        "Are you sure you want to delete this note? This action cannot be undone.",
      )
    ) {
      deleteNote(id)
        .then(() => {
          console.log("Note deleted successfully:", id);
        })
        .catch((err) => {
          console.error("Error deleting note:", err);
        });
    }
  };
  const handleEdit = (id) => {
    console.log("Navigating to edit note:", id);
    navigate(`/edit-note/${id}`);
  };
  const handleAddNote = () => {
    console.log("Navigating to add note page");
    navigate("/add-note");
  };
  const isAdminView = currentUser?.role === "admin";
  const pageTitle = isAdminView ? "Manage All Notes" : "My Notes";
  const emptyMessage = isAdminView
    ? "No notes found from any user. Add a new note to get started."
    : "You haven't created any notes yet. Click 'Add New Note' to begin!";
  const isLoading = isUserLoading || isNotesLoading;
  const baseTextColor = "text-gray-900 dark:text-gray-100"; 
  const primaryButtonClasses = `inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-900 transition duration-150 ease-in-out`; 
  return (
    <div className="container mx-auto px-4 py-8">
      {}
      <div className="flex justify-between items-center mb-6 flex-wrap gap-4">
        <h1 className={`text-2xl md:text-3xl font-bold ${baseTextColor}`}>
          {pageTitle} {}
        </h1>
        <button onClick={handleAddNote} className={primaryButtonClasses}>
          + Add New Note
        </button>
      </div>
      {}
      {isLoading ? (
        <div className="flex justify-center items-center min-h-[40vh]">
          <LoadingSpinner />
        </div>
      ) : notes && notes.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {}
          {notes.map((note) => (
            <MyNoteCard
              key={note._id} 
              note={note} 
              onDelete={handleDelete} 
              onEdit={handleEdit} 
              isAdminView={isAdminView} 
            />
          ))}
        </div>
      ) : (
        <EmptyState message={emptyMessage} /> 
      )}
    </div>
  );
};
export default MyNotesPage;

# src/components/Navbar/Navbar.js
import React, { useState, useContext } from "react";
import { Link, NavLink, useNavigate } from "react-router-dom";
import UserContext from "../../context/user/UserContext";
import { ThemeContext } from "../../context/ThemeProvider/ThemeProvider";
import { FaBars, FaTimes, FaSun, FaMoon, FaSearch } from "react-icons/fa";
const Navbar = () => {
  const { currentUser, isUserLoading, logout } = useContext(UserContext);
  const { theme, toggleTheme } = useContext(ThemeContext);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [showUserMenu, setShowUserMenu] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [isMobileSearchOpen, setIsMobileSearchOpen] = useState(false); 
  const navigate = useNavigate();
  const handleLogout = () => {
    logout();
    setIsMobileMenuOpen(false);
    setShowUserMenu(false);
    navigate("/login");
  };
  const handleSearchSubmit = (e) => {
    e.preventDefault();
    const trimmedQuery = searchQuery.trim();
    if (trimmedQuery) {
      navigate(`/search?q=${encodeURIComponent(trimmedQuery)}`);
      setSearchQuery("");
      setIsMobileSearchOpen(false); 
    }
  };
  const toggleMobileMenu = () => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
  };
  const closeMobileMenu = () => {
    setIsMobileMenuOpen(false);
  };
  const toggleMobileSearch = () => {
    setIsMobileSearchOpen(!isMobileSearchOpen);
  };
  const mobileLinkBase =
    "block rounded-md px-3 py-2 text-base font-medium text-center";
  const mobileLinkInactive =
    "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white";
  const mobileLinkActive =
    "bg-indigo-50 dark:bg-gray-900 text-indigo-700 dark:text-white";
  const searchInputClasses =
    "px-3 py-1.5 text-sm rounded-md border border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 text-neutral dark:text-gray-200 focus:outline-none focus:ring-1 focus:ring-indigo-500";
  return (
    <nav className="bg-white dark:bg-gray-800 shadow-md sticky top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          {}
          <div className="flex">
            <Link
              to="/"
              className="flex-shrink-0 flex items-center"
              onClick={closeMobileMenu}
            >
              <span className="text-2xl font-bold text-indigo-600 dark:text-indigo-400">
                √2
              </span>
            </Link>
            {}
            <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
              <NavLink
                to="/"
                className={({ isActive }) =>
                  `inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                    isActive
                      ? "border-indigo-500 text-gray-900 dark:text-gray-100"
                      : "border-transparent text-gray-500 hover:border-gray-300 dark:hover:border-gray-700 hover:text-gray-700 dark:text-gray-300 dark:hover:text-gray-100"
                  }`
                }
              >
                Read
              </NavLink>
              <NavLink
                to="/my-notes"
                className={({ isActive }) =>
                  `inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                    isActive
                      ? "border-indigo-500 text-gray-900 dark:text-gray-100"
                      : "border-transparent text-gray-500 hover:border-gray-300 dark:hover:border-gray-700 hover:text-gray-700 dark:text-gray-300 dark:hover:text-gray-100"
                  }`
                }
              >
                Write
              </NavLink>
            </div>
          </div>
          {}
          <div className="flex items-center space-x-2 sm:space-x-4">
            {}
            <form
              onSubmit={handleSearchSubmit}
              className="hidden sm:flex items-center relative"
            >
              <input
                type="text"
                placeholder="Search..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className={`${searchInputClasses} pr-8`}
                aria-label="Search posts"
              />
              <button
                type="submit"
                className="absolute right-0 top-0 bottom-0 px-2.5 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 focus:outline-none focus:ring-1 focus:ring-indigo-500 rounded-r-md"
                aria-label="Submit search"
              >
                <FaSearch />
              </button>
            </form>
            {}
            <div className="sm:hidden flex items-center">
              {isMobileSearchOpen ? (
                <form
                  onSubmit={handleSearchSubmit}
                  className="flex items-center relative"
                >
                  <input
                    type="text"
                    placeholder="Search..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className={`${searchInputClasses} w-36 pr-8 animate-expand`}
                    aria-label="Search posts"
                    autoFocus
                  />
                  <button
                    type="submit"
                    className="absolute right-0 top-0 bottom-0 px-2.5 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 focus:outline-none focus:ring-1 focus:ring-indigo-500 rounded-r-md"
                    aria-label="Submit search"
                  >
                    <FaSearch />
                  </button>
                </form>
              ) : (
                <button
                  onClick={toggleMobileSearch}
                  className="p-2 rounded-full text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-1 focus:ring-indigo-500"
                  aria-label="Open search"
                >
                  <FaSearch size={20} />
                </button>
              )}
            </div>
            {}
            <button
              onClick={toggleTheme}
              className="p-2 rounded-full text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-1 focus:ring-indigo-500"
              aria-label="Toggle theme"
            >
              {theme === "light" ? <FaMoon size={20} /> : <FaSun size={20} />}
            </button>
            {}
            <div className="hidden sm:flex sm:items-center">
              {!isUserLoading && currentUser ? (
                <div className="relative">
                  <button
                    onClick={() => setShowUserMenu(!showUserMenu)}
                    className="flex items-center text-sm font-medium text-gray-700 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white focus:outline-none"
                    id="user-menu-button"
                    aria-expanded={showUserMenu}
                    aria-haspopup="true"
                  >
                    {currentUser.name}
                    <svg
                      className="ml-1 h-5 w-5 text-gray-400"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      aria-hidden="true"
                    >
                      <path
                        fillRule="evenodd"
                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                        clipRule="evenodd"
                      />
                    </svg>
                  </button>
                  {showUserMenu && (
                    <div
                      className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white dark:bg-gray-700 ring-1 ring-black ring-opacity-5 focus:outline-none z-30"
                      role="menu"
                      aria-orientation="vertical"
                      aria-labelledby="user-menu-button"
                      tabIndex="-1"
                      onMouseLeave={() => setShowUserMenu(false)}
                    >
                      <Link
                        to="/profile"
                        onClick={() => setShowUserMenu(false)}
                        className="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600"
                        role="menuitem"
                        tabIndex="-1"
                      >
                        Profile
                      </Link>
                      <button
                        onClick={handleLogout}
                        className="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600"
                        role="menuitem"
                        tabIndex="-1"
                      >
                        Logout
                      </button>
                    </div>
                  )}
                </div>
              ) : (
                <>
                  <Link
                    to="/login"
                    className="text-gray-500 hover:text-gray-900 dark:text-gray-300 dark:hover:text-gray-100 inline-flex items-center px-3 py-2 text-sm font-medium"
                  >
                    Login
                  </Link>
                  <Link
                    to="/signup"
                    className="bg-indigo-600 text-white hover:bg-indigo-700 inline-flex items-center px-3 py-2 rounded-md text-sm font-medium"
                  >
                    Sign Up
                  </Link>
                </>
              )}
            </div>
            {}
            <div className="-mr-2 flex items-center sm:hidden">
              <button
                onClick={toggleMobileMenu}
                className="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500"
                aria-controls="mobile-menu"
                aria-expanded={isMobileMenuOpen}
              >
                <span className="sr-only">Open main menu</span>
                {isMobileMenuOpen ? (
                  <FaTimes className="block h-6 w-6" aria-hidden="true" />
                ) : (
                  <FaBars className="block h-6 w-6" aria-hidden="true" />
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
      {}
      {isMobileMenuOpen && (
        <div
          className="sm:hidden border-t border-gray-200 dark:border-gray-600"
          id="mobile-menu"
        >
          {}
          <div className="px-2 pt-2 pb-3 space-y-1">
            <NavLink
              to="/"
              className={({ isActive }) =>
                `${mobileLinkBase} ${
                  isActive ? mobileLinkActive : mobileLinkInactive
                }`
              }
              onClick={closeMobileMenu}
            >
              Read
            </NavLink>
            <NavLink
              to="/my-notes"
              className={({ isActive }) =>
                `${mobileLinkBase} ${
                  isActive ? mobileLinkActive : mobileLinkInactive
                }`
              }
              onClick={closeMobileMenu}
            >
              Write
            </NavLink>
          </div>
          {}
          <div className="pt-3 pb-3 border-t border-gray-200 dark:border-gray-700">
            <div className="px-2 space-y-1">
              {!isUserLoading && currentUser ? (
                <>
                  <NavLink
                    to="/profile"
                    className={({ isActive }) =>
                      `${mobileLinkBase} ${
                        isActive ? mobileLinkActive : mobileLinkInactive
                      }`
                    }
                    onClick={closeMobileMenu}
                  >
                    Profile{" "}
                    <span className="font-normal text-xs">
                      ({currentUser.name})
                    </span>
                  </NavLink>
                  <button
                    onClick={handleLogout}
                    className={`${mobileLinkBase} ${mobileLinkInactive} w-full`}
                  >
                    Logout
                  </button>
                </>
              ) : (
                <>
                  <NavLink
                    to="/login"
                    className={({ isActive }) =>
                      `${mobileLinkBase} ${
                        isActive ? mobileLinkActive : mobileLinkInactive
                      }`
                    }
                    onClick={closeMobileMenu}
                  >
                    Login
                  </NavLink>
                  <NavLink
                    to="/signup"
                    className={({ isActive }) =>
                      `${mobileLinkBase} ${
                        isActive ? mobileLinkActive : mobileLinkInactive
                      }`
                    }
                    onClick={closeMobileMenu}
                  >
                    Sign Up
                  </NavLink>
                </>
              )}
            </div>
          </div>
        </div>
      )}
    </nav>
  );
};
export default Navbar;

# src/components/NotesGrid/NotesGrid.js
import React, { useCallback, useRef } from "react";
import BlogCard from "../BlogCard/BlogCard";
import EmptyState from "../EmptySpace/EmptySpace";
const NotesGrid = ({
  notes,
  isFetching,
  hasMore,
  initialLoadDone,
  fetchNextBatchOfNotes,
}) => {
  const observer = useRef();
  const lastNoteElementRef = useCallback(
    (node) => {
      if (isFetching || !hasMore) return;
      if (observer.current) observer.current.disconnect();
      observer.current = new IntersectionObserver(
        (entries) => {
          if (entries[0].isIntersecting && hasMore) {
            fetchNextBatchOfNotes();
          }
        },
        { threshold: 0.5 },
      );
      if (node) observer.current.observe(node);
    },
    [isFetching, hasMore, fetchNextBatchOfNotes],
  );
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
      {isFetching && !initialLoadDone ? (
        <>
          {Array(6)
            .fill()
            .map((_, i) => (
              <BlogCard key={`grid-skel-init-${i}`} isLoading={true} />
            ))}
        </>
      ) : (
        <>
          {notes.map((note, index) => (
            <BlogCard
              ref={notes.length === index + 1 ? lastNoteElementRef : null}
              key={note._id}
              note={note}
            />
          ))}
          {isFetching &&
            initialLoadDone &&
            hasMore &&
            Array(3)
              .fill()
              .map((_, i) => (
                <BlogCard key={`grid-skel-more-${i}`} isLoading={true} />
              ))}
        </>
      )}
      {!isFetching && notes.length === 0 && initialLoadDone && (
        <EmptyState message="No posts found." />
      )}
      {!hasMore && initialLoadDone && notes.length > 0 && !isFetching && (
        <div className="text-center col-span-full py-6 text-subtle">
          You've reached the end! 👋
        </div>
      )}
    </div>
  );
};
export default NotesGrid;

# src/components/ProtectedRoute/ProtectedRoute.js
import React, { useContext } from "react";
import { Navigate, useLocation } from "react-router-dom";
import UserContext from "../../context/user/UserContext";
import LoadingSpinner from "../LoadingSpinner/LoadingSpinner";
const ProtectedRoute = ({ children }) => {
  const { currentUser, isUserLoading } = useContext(UserContext);
  const location = useLocation();
  if (isUserLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <LoadingSpinner size="lg" />
      </div>
    );
  }
  if (!currentUser) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }
  return children;
};
export default ProtectedRoute;

# src/components/Sidebar/Sidebar.js
import React from "react";
import { Link } from "react-router-dom";
import PropTypes from "prop-types";
import { FaGithub, FaLinkedin, FaTwitter } from "react-icons/fa";
const Sidebar = ({ recentPosts = [] }) => {
  const cardBaseClasses =
    "p-4 bg-white dark:bg-gray-900 rounded-lg shadow-md border border-gray-200 dark:border-gray-700";
  const cardTitleClasses =
    "text-lg font-semibold mb-3 text-gray-800 dark:text-gray-200";
  const linkClasses =
    "hover:text-blue-600 dark:hover:text-blue-400 hover:underline transition-colors";
  const socialIconClasses =
    "text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors";
  const metaTextClasses = "text-xs text-gray-500 dark:text-gray-400"; 
  const formatDate = (dateString) => {
    if (!dateString) return null;
    try {
      return new Date(dateString).toLocaleDateString("en-US", {
        year: "numeric",
        month: "short",
        day: "numeric",
      });
    } catch (e) {
      console.error("Error formatting date:", e);
      return null;
    }
  };
  return (
    <aside className="lg:col-span-1 space-y-6">
      {}
      {recentPosts.length > 0 && (
        <div className={cardBaseClasses}>
          <h3 className={cardTitleClasses}>Recent Posts</h3>
          <ul className="space-y-3">
            {" "}
            {}
            {recentPosts.map((post) => {
              const formattedDate = formatDate(post.date);
              const category = post.type || post.tag; 
              return (
                <li key={post._id}>
                  <Link
                    to={`/blog/${post._id}`}
                    className={`block font-medium ${linkClasses}`} 
                  >
                    {post.title || "Untitled Post"}
                  </Link>
                  {}
                  <div
                    className={`mt-1 ${metaTextClasses} flex items-center flex-wrap gap-x-2`}
                  >
                    {formattedDate && <span>{formattedDate}</span>}
                    {category && formattedDate && (
                      <span>•</span> 
                    )}
                    {category && (
                      <span className="px-1.5 py-0.5 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded text-xs font-medium">
                        {category}
                      </span>
                    )}
                  </div>
                </li>
              );
            })}
          </ul>
        </div>
      )}
      {}
      {}
      <div className={cardBaseClasses}>
        <h3 className={cardTitleClasses}>Follow Us</h3>
        <div className="flex space-x-4">
          <a
            href="https://github.com" 
            target="_blank"
            rel="noopener noreferrer"
            className={socialIconClasses}
            aria-label="GitHub Profile"
          >
            <FaGithub size={24} />
          </a>
          <a
            href="https://linkedin.com" 
            target="_blank"
            rel="noopener noreferrer"
            className={socialIconClasses}
            aria-label="LinkedIn Profile"
          >
            <FaLinkedin size={24} />
          </a>
          <a
            href="https://twitter.com" 
            target="_blank"
            rel="noopener noreferrer"
            className={socialIconClasses}
            aria-label="Twitter Profile"
          >
            <FaTwitter size={24} />
          </a>
          {}
        </div>
      </div>
      {}
      {}
      <div className={cardBaseClasses}>
        <h3 className={cardTitleClasses}>About √2 Technologies</h3>
        <p className="text-sm text-gray-700 dark:text-gray-300">
          Sharing insights on technology, development, Salesforce, and more.
          Exploring the roots of innovation and creative solutions.
          {}
        </p>
      </div>
      {}
    </aside>
  );
};
Sidebar.propTypes = {
  recentPosts: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      title: PropTypes.string,
      date: PropTypes.string, 
      type: PropTypes.string, 
      tag: PropTypes.string, 
    }),
  ),
};
export default Sidebar;

# src/components/Signup/Signup.js
import React, { useState, useContext } from "react";
import { Link, useNavigate } from "react-router-dom";
import UserContext from "../../context/user/UserContext";
import LoadingSpinner from "../LoadingSpinner/LoadingSpinner";
const Signup = () => {
  const { signup, isUserLoading } = useContext(UserContext);
  const [credentials, setCredentials] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
    country: "", 
    city: "", 
  });
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError("");
    if (credentials.password !== credentials.confirmPassword) {
      setError("Passwords do not match");
      setIsLoading(false);
      return;
    }
    if (!credentials.country || credentials.country.length < 2) {
      setError("Country must be at least 2 characters long.");
      setIsLoading(false);
      return;
    }
    if (!credentials.city || credentials.city.length < 1) {
      setError("City is required.");
      setIsLoading(false);
      return;
    }
    try {
      const result = await signup(
        credentials.name,
        credentials.email,
        credentials.password,
        credentials.country, 
        credentials.city, 
      );
      if (result.success) {
        navigate("/"); 
      } else {
        setError(result.message || "Signup failed");
      }
    } catch (error) {
      setError("An unexpected error occurred. Please try again.");
      console.error("Signup error:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const onChange = (e) => {
    setCredentials({ ...credentials, [e.target.name]: e.target.value });
  };
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
        <h2 className="text-2xl font-bold text-center text-gray-900 dark:text-white mb-6">
          Sign Up
        </h2>
        {error && (
          <div className="mb-4 p-3 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200 rounded">
            {error}
          </div>
        )}
        <form onSubmit={handleSubmit}>
          {}
          <div className="mb-4">
            <label
              htmlFor="name"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Name <span className="text-error">*</span>
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={credentials.name}
              onChange={onChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
              placeholder="Enter your name"
              required
              disabled={isLoading || isUserLoading}
              minLength="3"
            />
          </div>
          {}
          <div className="mb-4">
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Email <span className="text-error">*</span>
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={credentials.email}
              onChange={onChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
              placeholder="Enter your email"
              required
              disabled={isLoading || isUserLoading}
            />
          </div>
          {}
          <div className="mb-4">
            <label
              htmlFor="country"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Country <span className="text-error">*</span>
            </label>
            <input
              type="text"
              id="country"
              name="country"
              value={credentials.country}
              onChange={onChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
              placeholder="Enter your country"
              required
              minLength="2"
              disabled={isLoading || isUserLoading}
            />
          </div>
          {}
          <div className="mb-4">
            <label
              htmlFor="city"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              City <span className="text-error">*</span>
            </label>
            <input
              type="text"
              id="city"
              name="city"
              value={credentials.city}
              onChange={onChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
              placeholder="Enter your city"
              required
              minLength="1"
              disabled={isLoading || isUserLoading}
            />
          </div>
          {}
          <div className="mb-4">
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Password <span className="text-error">*</span>
            </label>
            <input
              type="password"
              id="password"
              name="password"
              value={credentials.password}
              onChange={onChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
              placeholder="Enter your password"
              required
              minLength="5"
              disabled={isLoading || isUserLoading}
            />
          </div>
          {}
          <div className="mb-6">
            <label
              htmlFor="confirmPassword"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Confirm Password <span className="text-error">*</span>
            </label>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              value={credentials.confirmPassword}
              onChange={onChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
              placeholder="Confirm your password"
              required
              minLength="5"
              disabled={isLoading || isUserLoading}
            />
          </div>
          {}
          <button
            type="submit"
            className="w-full py-2 px-4 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-gray-400 dark:disabled:bg-gray-600"
            disabled={isLoading || isUserLoading}
          >
            {isLoading || isUserLoading ? (
              <LoadingSpinner size="sm" />
            ) : (
              "Sign Up"
            )}
          </button>
        </form>
        <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
          Already have an account?{" "}
          <Link
            to="/login"
            className="font-medium text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300"
          >
            Login
          </Link>
        </p>
      </div>
    </div>
  );
};
export default Signup;

# src/components/SingleBlogPage/SingleBlogPage.js
import React, { useEffect, useContext } from "react";
import { Link, useParams, useNavigate } from "react-router-dom"; 
import NoteContext from "../../context/Notes/NoteContext";
import UserContext from "../../context/user/UserContext"; 
import LoadingSpinner from "../LoadingSpinner/LoadingSpinner";
import { getTypeColor } from "../../utils/typeColors";
const SingleBlogPage = () => {
  const { id } = useParams(); 
  const { note, fetchNoteById, isFetching, error } = useContext(NoteContext); 
  const { currentUser, isUserLoading } = useContext(UserContext); 
  const navigate = useNavigate(); 
  useEffect(() => {
    if ((!note || note._id !== id) && !isFetching) {
      console.log(`SingleBlogPage: Fetching note with ID: ${id}`);
      fetchNoteById(id);
    }
  }, [id, fetchNoteById, note, isFetching]); 
  const handleEdit = () => {
    navigate(`/edit-note/${id}`);
  };
  if (isFetching || isUserLoading || (!note && !error)) {
    return (
      <div className="flex justify-center items-center min-h-[60vh]">
        {" "}
        {}
        <LoadingSpinner />
      </div>
    );
  }
  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="card text-center max-w-md mx-auto">
          <h2 className="text-xl font-semibold text-error mb-4">
            Error Loading Post
          </h2>
          <p className="text-error mb-6">{error}</p>
          <button
            onClick={() => fetchNoteById(id)} 
            className="btn-primary mr-2"
          >
            Retry
          </button>
          <Link to="/" className="btn-secondary">
            Back to Home
          </Link>
        </div>
      </div>
    );
  }
  if (!isFetching && !note) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="card text-center max-w-md mx-auto">
          <h2 className="text-xl font-semibold text-neutral dark:text-gray-100 mb-4">
            Post Not Found
          </h2>
          <p className="text-subtle mb-6">
            The blog post you are looking for might have been removed or does
            not exist.
          </p>
          <Link to="/" className="btn-primary">
            Back to Home
          </Link>
        </div>
      </div>
    );
  }
  const {
    title = "Untitled Post", 
    description = "", 
    tag,
    type,
    readTimeMinutes,
    user, 
    date,
  } = note; 
  const authorName = user?.name || "Unknown Author";
  const authorAvatarUrl = user?.avatarUrl;
  const postDate = date
    ? new Date(date).toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      })
    : "No date"; 
  const typeColorClass = getTypeColor(type || tag);
  const showEditButton =
    !isUserLoading &&
    currentUser &&
    user &&
    (currentUser._id === user._id || currentUser.role === "admin");
  return (
    <div className="container mx-auto px-4 py-8">
      {}
      <div className={`card max-w-6xl mx-auto ${typeColorClass} border-t-4`}>
        {}
        <Link
          to="/"
          className="text-primary hover:underline mb-6 inline-block text-sm"
        >
          ← Back to All Posts
        </Link>
        {}
        <div className="flex justify-between items-start mb-4 flex-wrap gap-4">
          {" "}
          {}
          {}
          <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold text-neutral dark:text-gray-100 flex-1 mr-4 break-words">
            {" "}
            {}
            {title}
          </h1>
          {}
          {showEditButton && (
            <button
              onClick={handleEdit}
              className="btn-secondary whitespace-nowrap px-3 py-1.5 text-xs" 
              aria-label={`Edit post titled ${title}`}
            >
              Edit Post
            </button>
          )}
        </div>
        {}
        <div className="text-subtle mb-8 flex flex-wrap gap-x-4 gap-y-2 items-center border-b border-gray-200 dark:border-gray-700 pb-4">
          {}
          <div className="flex items-center space-x-2">
            {authorAvatarUrl ? (
              <img
                src={authorAvatarUrl}
                alt={authorName}
                className="h-8 w-8 rounded-full object-cover border border-gray-200 dark:border-gray-600" 
                onError={(e) => {
                  e.target.style.display = "none";
                }} 
              />
            ) : (
              <div className="h-8 w-8 rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center text-sm font-medium text-neutral dark:text-gray-200">
                {}
                {authorName
                  .split(" ")
                  .map((n) => n?.[0])
                  .join("")
                  .toUpperCase()
                  .slice(0, 2) || "?"}
              </div>
            )}
            <span className="font-medium text-neutral dark:text-gray-200">
              {authorName}
            </span>
          </div>
          <span>•</span>
          {}
          <time dateTime={date ? new Date(date).toISOString() : undefined}>
            {postDate}
          </time>{" "}
          {}
          {}
          {readTimeMinutes && (
            <>
              <span>•</span>
              <span>{readTimeMinutes} min read</span>
            </>
          )}
          {}
          {(type || tag) && (
            <>
              <span>•</span>
              <span className="px-2 py-0.5 bg-gray-100 dark:bg-gray-700 text-neutral dark:text-gray-300 text-xs font-medium rounded-full capitalize">
                {" "}
                {}
                {type || tag}
              </span>
            </>
          )}
        </div>
        {}
        <div
          className="prose dark:prose-invert max-w-none text-neutral dark:text-gray-200 leading-relaxed" 
          dangerouslySetInnerHTML={{
            __html: description || "<p>No content available for this post.</p>",
          }}
        />
      </div>
    </div>
  );
};
export default SingleBlogPage;

# src/components/Tabs/Tabs.js
import React from "react";
import PropTypes from "prop-types";
const Tabs = ({ activeTab, setActiveTab, types = [] }) => {
  const baseTextColor = "text-gray-600 dark:text-gray-400";
  const activeTextColor = "text-blue-600 dark:text-blue-400";
  const hoverTextColor = "hover:text-gray-800 dark:hover:text-gray-200";
  const activeBorderColor = "border-blue-600 dark:border-blue-400";
  const baseBorderColor = "border-transparent";
  const hoverBorderColor = "hover:border-gray-300 dark:hover:border-gray-600";
  const tabOrder = ["All", ...types.filter((t) => t !== "All")];
  if (tabOrder.length <= 1) {
    return null;
  }
  return (
    <nav className="mb-6 border-b border-gray-200 dark:border-gray-700 overflow-x-auto whitespace-nowrap">
      {}
      <ul className="flex -mb-px text-sm font-medium text-center">
        {tabOrder.map((type) => (
          <li key={type} className="mr-2">
            {" "}
            {}
            <button
              onClick={() => setActiveTab(type)}
              className={`inline-block p-4 rounded-t-lg border-b-2 transition-colors duration-150 ease-in-out focus:outline-none focus:ring-1 focus:ring-blue-300 dark:focus:ring-blue-600 ${
                activeTab === type
                  ? `${activeTextColor} ${activeBorderColor}` 
                  : `${baseBorderColor} ${baseTextColor} ${hoverTextColor} ${hoverBorderColor}` 
              }`}
              aria-current={activeTab === type ? "page" : undefined}
            >
              {}
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </button>
          </li>
        ))}
      </ul>
    </nav>
  );
};
Tabs.propTypes = {
  activeTab: PropTypes.string.isRequired,
  setActiveTab: PropTypes.func.isRequired,
  types: PropTypes.arrayOf(PropTypes.string).isRequired,
};
export default Tabs;

# src/components/UserProfile/UserProfile.js
import React, { useContext, useEffect } from "react";
import { Link } from "react-router-dom";
import UserContext from "../../context/user/UserContext";
import LoadingSpinner from "../LoadingSpinner/LoadingSpinner";
const UserProfile = () => {
  const { currentUser, isUserLoading, getUserDetails } =
    useContext(UserContext);
  useEffect(() => {
    if (!currentUser && !isUserLoading) {
      getUserDetails(); 
    }
  }, [currentUser, isUserLoading, getUserDetails]);
  if (isUserLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <LoadingSpinner size="lg" />
      </div>
    );
  }
  if (!currentUser) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p className="text-lg text-gray-700 dark:text-gray-300">
          Unable to load profile. Please try logging in again.
        </p>
      </div>
    );
  }
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
        <h2 className="text-2xl font-bold text-center text-gray-900 dark:text-white mb-6">
          Your Profile
        </h2>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Name
            </label>
            <p className="mt-1 text-lg text-gray-900 dark:text-gray-100">
              {currentUser.name}
            </p>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Email
            </label>
            <p className="mt-1 text-lg text-gray-900 dark:text-gray-100">
              {currentUser.email}
            </p>
          </div>
          {}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Joined
            </label>
            <p className="mt-1 text-lg text-gray-900 dark:text-gray-100">
              {new Date(currentUser.date).toLocaleDateString()}
            </p>
          </div>
        </div>
        <div className="mt-6">
          <Link
            to="/edit-profile"
            className="w-full inline-flex justify-center py-2 px-4 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Edit Profile
          </Link>
        </div>
      </div>
    </div>
  );
};
export default UserProfile;

# src/context/Notes/NoteContext.js
import { createContext } from "react";
import React from "react";
const NoteContext = createContext();
export default NoteContext;

# src/context/Notes/NoteState.js
import NoteContext from "./NoteContext";
import React, {
  useState,
  useEffect,
  useCallback,
  useMemo,
  useRef,
} from "react";
const NoteState = (props) => {
  const host = process.env.REACT_APP_BACKEND;
  const [notes, setNotes] = useState([]); 
  const [allNotes, setAllNotes] = useState([]); 
  const [note, setNote] = useState(null); 
  const [hasMore, setHasMore] = useState(true); 
  const [lastId, setLastId] = useState(null); 
  const [isFetching, setIsFetching] = useState(false); 
  const [error, setError] = useState(null); 
  const [initialLoadDone, setInitialLoadDone] = useState(false); 
  const [featuredNotes, setFeaturedNotes] = useState([]); 
  const [featuredLastId, setFeaturedLastId] = useState(null);
  const [hasMoreFeatured, setHasMoreFeatured] = useState(true);
  const [blogTypes, setBlogTypes] = useState([]); 
  const [recentPosts, setRecentPosts] = useState([]); 
  const [isInitialFeaturedLoading, setIsInitialFeaturedLoading] =
    useState(false);
  const [isFetchingMoreFeatured, setIsFetchingMoreFeatured] = useState(false); 
  const initialFetchInitiated = useRef(false);
  const fetchFeaturedNotesBatch = useCallback(
    async (isInitialLoad = false, retryCount = 0) => {
      const maxRetries = 3;
      const isLoading = isInitialLoad
        ? isInitialFeaturedLoading
        : isFetchingMoreFeatured;
      const setLoading = isInitialLoad
        ? setIsInitialFeaturedLoading
        : setIsFetchingMoreFeatured;
      if (isLoading || (!isInitialLoad && !hasMoreFeatured)) {
        return;
      }
      console.log(
        `Fetching featured batch. Initial: ${isInitialLoad}, Last ID: ${featuredLastId}`,
      );
      setLoading(true);
      const limit = 5;
      const currentLastId = isInitialLoad ? null : featuredLastId;
      const url = `${host}/api/notes/featured/batch?limit=${limit}${
        currentLastId ? `&lastId=${currentLastId}` : ""
      }`;
      try {
        const response = await fetch(url, {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        });
        const json = await response.json();
        if (!response.ok) {
          throw new Error(
            json.error || `HTTP error! Status: ${response.status}`,
          );
        }
        if (json.success && json.notes) {
          setFeaturedNotes((prevNotes) => {
            const existingIds = new Set(prevNotes.map((n) => n._id));
            const newUniqueNotes = json.notes.filter(
              (n) => !existingIds.has(n._id),
            );
            const updatedNotes = isInitialLoad
              ? newUniqueNotes
              : [...prevNotes, ...newUniqueNotes];
            console.log(
              `Featured Batch: Initial=${isInitialLoad}. Added ${newUniqueNotes.length}. Total: ${updatedNotes.length}`,
            );
            return updatedNotes;
          });
          setFeaturedLastId(json.nextLastId);
          setHasMoreFeatured(json.hasMore);
        } else {
          setHasMoreFeatured(false);
        }
      } catch (error) {
        console.error("Error fetching featured notes:", error);
        if (retryCount < maxRetries) {
          console.log(`Retrying fetch... Attempt ${retryCount + 1}`);
          setTimeout(() => {
            fetchFeaturedNotesBatch(isInitialLoad, retryCount + 1);
          }, 1000 * (retryCount + 1));
        } else {
          setError("Failed to fetch featured notes after retries.");
          setHasMoreFeatured(false);
        }
      } finally {
        setLoading(false);
      }
    },
    [
      host,
      featuredLastId,
      hasMoreFeatured,
      isInitialFeaturedLoading,
      isFetchingMoreFeatured,
    ],
  );
  const getFeaturedNotes = useCallback(
    async (limit = 3) => {
      console.log("Fetching featured notes...");
      try {
        const response = await fetch(
          `${host}/api/notes/featured?limit=${limit}`,
          {
            method: "GET",
            headers: { "Content-Type": "application/json" },
          },
        );
        const json = await response.json();
        if (json.success) {
          setFeaturedNotes(json.notes);
          console.log("Featured notes fetched:", json.notes.length);
        } else console.error("Failed to fetch featured notes:", json.error);
      } catch (error) {
        console.error("Network error fetching featured notes:", error);
      }
    },
    [host],
  );
  const getBlogTypes = useCallback(async () => {
    console.log("Fetching blog types...");
    try {
      const response = await fetch(`${host}/api/notes/types`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });
      const json = await response.json();
      if (json.success && Array.isArray(json.types)) {
        setBlogTypes(["All", ...json.types]); 
        console.log("Blog types fetched:", json.types);
      } else {
        console.error("Failed to fetch blog types:", json.error);
        setBlogTypes(["All"]); 
      }
    } catch (error) {
      console.error("Network error fetching blog types:", error);
      setBlogTypes(["All"]); 
    }
  }, [host]);
  const getRecentPosts = useCallback(
    async (limit = 5) => {
      console.log("Fetching recent posts...");
      try {
        const response = await fetch(
          `${host}/api/notes/recent?limit=${limit}`,
          {
            method: "GET",
            headers: { "Content-Type": "application/json" },
          },
        );
        const json = await response.json();
        if (json.success) {
          setRecentPosts(json.notes);
          console.log("Recent posts fetched:", json.notes.length);
        } else console.error("Failed to fetch recent posts:", json.error);
      } catch (error) {
        console.error("Network error fetching recent posts:", error);
      }
    },
    [host],
  );
  const fetchNoteById = useCallback(
    async (id) => {
      console.log(`Workspaceing note by ID: ${id}`);
      setIsFetching(true); 
      setError(null); 
      setNote(null); 
      try {
        const response = await fetch(
          `${host}/api/notes/fetchNotesIrrespective/${id}`,
        );
        const data = await response.json();
        if (!response.ok) {
          throw new Error(
            data.error || `HTTP error! status: ${response.status}`,
          );
        }
        setNote(data); 
        console.log("Single note fetched successfully.");
      } catch (err) {
        console.error("Error fetching single note:", err);
        setError(err.message || "Failed to fetch note.");
      } finally {
        setIsFetching(false);
      }
    },
    [host],
  ); 
  const fetchNextBatchOfNotes = useCallback(async () => {
    if (isFetching || !hasMore) {
      return;
    }
    console.log("Fetch initiated for allNotes. Current lastId:", lastId);
    setIsFetching(true);
    setError(null); 
    const limit = 9; 
    const url = `${host}/api/notes/fetchNextNote?limit=${limit}${
      lastId ? `&lastId=${lastId}` : ""
    }`;
    console.log("Fetching next batch URL:", url);
    try {
      const response = await fetch(url, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });
      const json = await response.json(); 
      if (!response.ok) {
        throw new Error(json.error || `HTTP error! Status: ${response.status}`);
      }
      if (json.success && json.notes) {
        setAllNotes((prevNotes) => {
          const existingIds = new Set(prevNotes.map((n) => n._id));
          const newUniqueNotes = json.notes.filter(
            (n) => !existingIds.has(n._id),
          );
          const updatedNotes = [...prevNotes, ...newUniqueNotes];
          console.log(
            `Added ${newUniqueNotes.length} new notes. Total: ${updatedNotes.length}`,
          );
          return updatedNotes;
        });
        const newLastId = json.nextLastId;
        setLastId(newLastId); 
        setHasMore(json.hasMore); 
        console.log(
          "Fetch successful. New lastId:",
          newLastId,
          "Has More:",
          json.hasMore,
        );
        if (!initialLoadDone) {
          console.log("Setting initialLoadDone = true");
          setInitialLoadDone(true);
        }
      } else {
        console.error(
          "API Error or invalid data:",
          json.error || "No notes array received",
        );
        setHasMore(false); 
      }
    } catch (error) {
      console.error("Error fetching next batch of notes:", error);
      setError(error.message); 
      setHasMore(false); 
    } finally {
      setIsFetching(false); 
    }
  }, [host, lastId, hasMore, isFetching, initialLoadDone]);
  const getNotes = useCallback(async () => {
    console.log("Fetching user-specific notes...");
    const token = localStorage.getItem("token");
    if (!token) {
      console.error("getNotes: No token found.");
      setNotes([]); 
      return;
    }
    try {
      const response = await fetch(`${host}/api/notes/fetchallnotes`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "auth-token": token,
        },
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error || `HTTP error! Status: ${response.status}`,
        );
      }
      const json = await response.json();
      setNotes(json); 
      console.log("User-specific notes fetched:", json.length);
    } catch (error) {
      console.error("Error fetching user-specific notes:", error);
      setNotes([]); 
    }
  }, [host]);
  const addNote = useCallback(
    async (noteData) => {
      const token = localStorage.getItem("token");
      if (!token) {
        console.error("addNote: Authentication token not found.");
        return { success: false, message: "Authentication required." };
      }
      console.log("Adding note:", noteData);
      try {
        const response = await fetch(`${host}/api/notes/addnote`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "auth-token": token,
          },
          body: JSON.stringify({ ...noteData, tag: noteData.tag || "" }),
        });
        const addedNote = await response.json();
        if (!response.ok) {
          const errorMessage = addedNote.error || "Failed to add note.";
          return { success: false, message: errorMessage };
        }
        console.log("Note added successfully:", addedNote);
        setNotes((prevUserNotes) => [addedNote, ...prevUserNotes]);
        setAllNotes((prevAllNotes) => [addedNote, ...prevAllNotes]);
        if (addedNote.type && !blogTypes.includes(addedNote.type)) {
          setBlogTypes((prevTypes) => [...prevTypes, addedNote.type]);
        }
        setRecentPosts((prevRecent) => [addedNote, ...prevRecent].slice(0, 5));
        return { success: true, note: addedNote };
      } catch (error) {
        return {
          success: false,
          message: error.message || "An unexpected error occurred.",
        };
      }
    },
    [host, blogTypes],
  );
  const deleteNote = useCallback(
    async (id) => {
      const token = localStorage.getItem("token");
      if (!token) {
        console.error("deleteNote: Authentication token not found.");
        throw new Error("Authentication required to delete a note."); 
      }
      console.log("Deleting note:", id);
      try {
        const response = await fetch(`${host}/api/notes/deletenote/${id}`, {
          method: "DELETE",
          headers: { "Content-Type": "application/json", "auth-token": token },
        });
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(
            errorData.error || `HTTP error! Status: ${response.status}`,
          );
        }
        const json = await response.json(); 
        console.log(json.Success); 
        setNotes((prevNotes) => prevNotes.filter((note) => note._id !== id));
        setAllNotes((prevAllNotes) =>
          prevAllNotes.filter((note) => note._id !== id),
        );
        setFeaturedNotes((prev) => prev.filter((n) => n._id !== id));
        setRecentPosts((prev) => prev.filter((n) => n._id !== id));
      } catch (error) {
        console.error("Error deleting note:", error);
        throw error; 
      }
    },
    [host],
  ); 
  const editNote = useCallback(
    async (id, title, description, tag, type, isFeatured) => {
      const token = localStorage.getItem("token");
      if (!token) {
        console.error("editNote: Authentication token not found.");
        throw new Error("Authentication required to edit a note.");
      }
      console.log("Editing note:", id);
      try {
        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            "auth-token": token,
          },
          body: JSON.stringify({
            title,
            description,
            tag: tag || "",
            type,
            isFeatured,
          }),
        });
        const updatedNoteResponse = await response.json();
        if (!response.ok) {
          const errorMessage =
            updatedNoteResponse.error ||
            `HTTP error! Status: ${response.status}`;
          throw new Error(errorMessage);
        }
        const updatedNote = updatedNoteResponse.note;
        if (!updatedNote) {
          throw new Error("Backend response did not contain the updated note.");
        }
        console.log("Note updated successfully:", updatedNote);
        const updateState = (prevNotes) =>
          prevNotes.map((note) =>
            note._id === id ? { ...note, ...updatedNote } : note,
          );
        setNotes(updateState);
        setAllNotes(updateState);
        setFeaturedNotes((prev) =>
          prev.map((n) => (n._id === id ? { ...n, ...updatedNote } : n)),
        );
        setRecentPosts((prev) =>
          prev.map((n) => (n._id === id ? { ...n, ...updatedNote } : n)),
        );
        if (updatedNote.isFeatured) {
          setFeaturedNotes((prev) => {
            const exists = prev.some((n) => n._id === id);
            if (exists)
              return prev.map((n) => (n._id === id ? updatedNote : n));
            return [updatedNote, ...prev].slice(0, 3);
          });
        } else {
          setFeaturedNotes((prev) => prev.filter((n) => n._id !== id));
        }
        if (updatedNote.type && !blogTypes.includes(updatedNote.type)) {
          setBlogTypes((prevTypes) => [
            ...new Set([...prevTypes, updatedNote.type]),
          ]);
        }
      } catch (error) {
        console.error("Error editing note:", error);
        throw error;
      }
    },
    [host, blogTypes],
  );
  useEffect(() => {
    if (!initialFetchInitiated.current) {
      console.log("Running initial fetches...");
      fetchFeaturedNotesBatch(true); 
      fetchNextBatchOfNotes(); 
      getBlogTypes();
      getRecentPosts();
      initialFetchInitiated.current = true;
    } else {
      console.log("Skipping initial fetches on StrictMode re-run.");
    }
  }, []);
  const contextValue = useMemo(
    () => ({
      notes,
      allNotes,
      note,
      hasMore,
      isFetching,
      error,
      featuredNotes,
      blogTypes,
      recentPosts,
      initialLoadDone,
      fetchFeaturedNotesBatch, 
      hasMoreFeatured,
      isInitialFeaturedLoading, 
      isFetchingMoreFeatured, 
      addNote,
      deleteNote,
      editNote,
      getNotes,
      fetchNextBatchOfNotes,
      fetchNoteById,
      getBlogTypes,
      getRecentPosts,
    }),
    [
      notes,
      allNotes,
      note,
      hasMore,
      isFetching,
      error,
      featuredNotes,
      blogTypes,
      recentPosts,
      initialLoadDone,
      hasMoreFeatured,
      isInitialFeaturedLoading,
      isFetchingMoreFeatured, 
      addNote,
      deleteNote,
      editNote,
      getNotes,
      fetchNextBatchOfNotes,
      fetchNoteById,
      getBlogTypes,
      getRecentPosts,
      fetchFeaturedNotesBatch,
    ],
  );
  return (
    <NoteContext.Provider value={contextValue}>
      {props.children}
    </NoteContext.Provider>
  );
};
export default NoteState;

# src/context/ThemeProvider/ThemeProvider.js
import React, { createContext, useState, useEffect } from "react";
export const ThemeContext = createContext();
const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState(() => {
    const savedTheme = localStorage.getItem("theme");
    if (savedTheme) return savedTheme;
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  });
  useEffect(() => {
    document.documentElement.classList.toggle("dark", theme === "dark");
    localStorage.setItem("theme", theme);
  }, [theme]);
  const toggleTheme = () => {
    setTheme((prevTheme) => (prevTheme === "light" ? "dark" : "light"));
  };
  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};
export default ThemeProvider;

# src/context/user/UserContext.js
import { createContext } from "react";
const UserContext = createContext();
export default UserContext;

# src/context/user/UserState.js
import React, { useState, useCallback, useMemo, useEffect } from "react";
import UserContext from "./UserContext";
const UserState = (props) => {
  const host = "http://localhost:5000";
  const [currentUser, setCurrentUser] = useState(null);
  const [isUserLoading, setIsUserLoading] = useState(true);
  const getUserDetails = useCallback(async () => {
    const token = localStorage.getItem("token");
    if (!token) {
      setCurrentUser(null);
      setIsUserLoading(false);
      console.log("getUserDetails: No token found, user cleared."); 
      return;
    }
    console.log("getUserDetails: Token found, fetching user..."); 
    setIsUserLoading(true);
    try {
      const response = await fetch(`${host}/api/auth/getuser`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "auth-token": token,
        },
      });
      if (!response.ok) {
        if (response.status === 401) {
          console.error("getUserDetails: Invalid token or unauthorized.");
          localStorage.removeItem("token"); 
          setCurrentUser(null);
        } else {
          throw new Error(`Failed to fetch user, status: ${response.status}`);
        }
      } else {
        const userData = await response.json();
        setCurrentUser(userData);
        console.log(
          "getUserDetails: User fetched successfully:",
          userData.email,
        ); 
      }
    } catch (error) {
      console.error("Error fetching user:", error);
      localStorage.removeItem("token"); 
      setCurrentUser(null);
    } finally {
      setIsUserLoading(false);
      console.log(
        "getUserDetails: Fetch finished. Loading state:",
        isUserLoading,
      ); 
    }
  }, [host]); 
  const updateUserProfile = useCallback(
    async (updatedData) => {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("Authentication required");
      setIsUserLoading(true);
      try {
        const response = await fetch(`${host}/api/auth/profile`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            "auth-token": token,
          },
          body: JSON.stringify(updatedData),
        });
        if (!response.ok) throw new Error("Failed to update profile");
        const responseData = await response.json();
        setCurrentUser(responseData.user); 
        return responseData; 
      } catch (error) {
        console.error("Error updating profile:", error);
        throw error; 
      } finally {
        setIsUserLoading(false);
      }
    },
    [host],
  );
  const clearCurrentUser = useCallback(() => {
    setCurrentUser(null);
    setIsUserLoading(false); 
    console.log("clearCurrentUser: User state cleared."); 
  }, []);
  const login = async (email, password) => {
    try {
      const response = await fetch(`${host}/api/auth/login`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: email || "", 
          password: password || "", 
        }),
      });
      const json = await response.json();
      if (json.success) {
        localStorage.setItem("token", json.authtoken);
        console.log("Login successful, token stored. Fetching user details..."); 
        await getUserDetails(); 
        return { success: true }; 
      } else {
        console.error("Login API error:", json.error); 
        throw new Error(json.error || "Login failed");
      }
    } catch (error) {
      console.error("Login function error:", error.message);
      return { success: false, message: error.message || "Login failed" };
    }
  };
  const logout = useCallback(() => {
    console.log("logout: Removing token and clearing user."); 
    localStorage.removeItem("token");
    clearCurrentUser();
  }, [clearCurrentUser]);
  const signup = async (
    name,
    email,
    password,
    country,
    city,
    about,
    avatarUrl,
  ) => {
    try {
      const response = await fetch(`${host}/api/auth/createuser`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: name || "", 
          email: email || "",
          password: password || "",
          country: country || "", 
          city: city || "", 
          about: about || "about is empty", 
          avatarUrl: avatarUrl || null, 
        }),
      });
      const json = await response.json();
      if (json.success) {
        localStorage.setItem("token", json.authtoken);
        console.log(
          "Signup successful, token stored. Fetching user details...",
        ); 
        await getUserDetails(); 
        return { success: true }; 
      } else {
        console.error("Signup API error:", json.error || json.errors); 
        let errorMessage = "Signup failed";
        if (json.error) {
          errorMessage = json.error;
        } else if (json.errors && Array.isArray(json.errors)) {
          errorMessage = json.errors.map((err) => err.msg).join(", ");
        }
        throw new Error(errorMessage);
      }
    } catch (error) {
      console.error("Signup function error:", error.message);
      return { success: false, message: error.message || "Signup failed" };
    }
  };
  useEffect(() => {
    const token = localStorage.getItem("token");
    console.log("UserState Initial Load: Token exists?", !!token); 
    if (token) {
      getUserDetails();
    } else {
      setIsUserLoading(false); 
    }
  }, []); 
  const value = useMemo(
    () => ({
      currentUser,
      isUserLoading,
      getUserDetails,
      updateUserProfile,
      clearCurrentUser,
      login,
      logout,
      signup,
    }),
    [
      currentUser,
      isUserLoading,
      getUserDetails,
      updateUserProfile,
      clearCurrentUser,
      login,
      logout,
      signup,
    ],
  );
  return (
    <UserContext.Provider value={value}>{props.children}</UserContext.Provider>
  );
};
export default UserState;

# src/index.css
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap");@tailwind base;@tailwind components;@tailwind utilities;@layer base{html,body,#root{height:100%;margin:0;padding:0;}body{@apply font-sans antialiased bg-background dark:bg-dark text-neutral dark:text-gray-200 leading-relaxed;min-height:100%;}#root{min-height:100%;display:flex;flex-direction:column;}h1,h2,h3,h4,h5,h6{@apply font-semibold text-gray-900 dark:text-white;}.ProseMirror{min-height:250px;@apply bg-white dark:bg-gray-800 text-neutral dark:text-gray-200;}.ProseMirror:focus{outline:none;}.ProseMirror p{@apply my-2 leading-relaxed;}.ProseMirror h2,.ProseMirror h3,.ProseMirror h4{@apply mt-6 mb-3 font-semibold text-gray-900 dark:text-white;}.ProseMirror h2{@apply text-xl;}.ProseMirror h3{@apply text-lg;}.ProseMirror h4{@apply text-base;}.ProseMirror ul,.ProseMirror ol{@apply my-4 pl-6;list-style-position:outside;}.ProseMirror ul{@apply list-disc;}.ProseMirror ol{@apply list-decimal;}.ProseMirror li > p{@apply my-1;}.ProseMirror li{@apply my-1;}.ProseMirror blockquote{@apply border-l-4 border-gray-300 dark:border-gray-600 pl-4 italic my-4 text-gray-600 dark:text-gray-400;}.ProseMirror pre{@apply bg-gray-100 dark:bg-gray-900 text-neutral dark:text-gray-200 font-mono text-sm p-4 rounded overflow-x-auto my-4 whitespace-pre-wrap;}.ProseMirror code{@apply bg-gray-200 dark:bg-gray-700 text-red-600 dark:text-red-400 px-1 py-0.5 rounded text-sm font-mono;}.ProseMirror pre code{background:none !important;color:inherit !important;padding:0 !important;font-size:inherit !important;border-radius:0 !important;}.ProseMirror a{@apply text-blue-600 dark:text-blue-400 hover:underline cursor-pointer;}.ProseMirror img{@apply max-w-full h-auto my-4 rounded;display:block;}.ProseMirror img.ProseMirror-selectednode{@apply ring-2 ring-blue-500 outline-none;}.ProseMirror p.is-editor-empty:first-child::before{content:attr(data-placeholder);float:left;color:#adb5bd;pointer-events:none;height:0;@apply text-base;}.dark .ProseMirror p.is-editor-empty:first-child::before{color:#6b7280;}}@layer components{.btn-primary{@apply inline-flex items-center px-4 py-2.5 text-sm font-medium text-white bg-primary hover:bg-blue-900 rounded-lg shadow-soft focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition duration-200 ease-in-out;}.btn-secondary{@apply inline-flex items-center px-4 py-2.5 text-sm font-medium text-neutral bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg shadow-soft focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-secondary transition duration-200 ease-in-out;}.input-field{@apply w-full px-4 py-2.5 border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 text-neutral dark:text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary transition duration-150 ease-in-out;}.card{@apply bg-white dark:bg-gray-900 rounded-lg shadow-soft-lg border border-gray-100 dark:border-gray-800 p-6;}.text-heading{@apply text-2xl md:text-3xl font-semibold text-gray-900 dark:text-white tracking-tight;}.text-subtle{@apply text-sm text-secondary dark:text-gray-400;}.scrollbar-thin{scrollbar-width:thin;scrollbar-color:theme("colors.gray.400") theme("colors.gray.200");}.dark .scrollbar-thin{scrollbar-color:theme("colors.gray.600") theme("colors.gray.800");}.scrollbar-thin::-webkit-scrollbar{width:8px;height:8px;}.scrollbar-thin::-webkit-scrollbar-track{@apply bg-gray-200 dark:bg-gray-800 rounded-full;}.scrollbar-thin::-webkit-scrollbar-thumb{@apply bg-gray-400 dark:bg-gray-600 rounded-full;}.scrollbar-thin::-webkit-scrollbar-thumb:hover{@apply bg-gray-500 dark:bg-gray-500;}}

# src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
reportWebVitals();

# src/reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};
export default reportWebVitals;

# src/setupTests.js
import '@testing-library/jest-dom';

# src/utils/typeColors.js
export const typeToColorMap = {
  technology: "border-orange-600", 
  creative: "border-blue-600", 
  tutorial: "border-lime-600", 
  lifestyle: "border-rose-500", 
  news: "border-red-600", 
  javascript: "border-amber-500", 
  salesforce: "border-teal-600", 
  sociology: "border-indigo-600", 
  life: "border-emerald-600", 
  default: "border-stone-500", 
};
export const getTypeColor = (type) => {
  if (!type) return typeToColorMap.default;
  const typeLower = type.toLowerCase();
  return typeToColorMap[typeLower] || typeToColorMap.default;
};

# tailwind.config.js
const defaultTheme = require("tailwindcss/defaultTheme");
module.exports = {
  content: ["./src*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      colors: {
        "primary": "#0D9488", 
        "accent": "#F59E0B", 
        "neutral": "#57534E", 
        "secondary": "#A8A29E", 
        "background": "#FEFBF6", 
        "dark": "#000000", 
        "error": "#E11D48", 
        "success": "#16A34A", 
        "dark-card": "#3F3F46", 
        "dark-subtle": "#A1A1AA", 
      },
      fontFamily: {
        sans: ["Inter", ...defaultTheme.fontFamily.sans],
      },
      spacing: {
        18: "4.5rem",
      },
      boxShadow: {
        "soft": "0 4px 12px rgba(0, 0, 0, 0.05), 0 2px 4px rgba(0, 0, 0, 0.05)",
        "soft-lg":
          "0 10px 20px rgba(0, 0, 0, 0.08), 0 4px 8px rgba(0, 0, 0, 0.06)",
      },
      borderRadius: {
        lg: "0.75rem",
      },
      transitionProperty: {
        height: "height",
      },
    },
  },
  darkMode: "class",
  plugins: [],
};
